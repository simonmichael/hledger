
.TH "HLEDGER\-WEB" "1" "October 2025" "hledger-web-1.50.99 " "hledger User Manuals"



.SH NAME
hledger\-web \- web interface and API for \f[CR]hledger\f[R], a robust,
friendly plain text accounting app.
.SH SYNOPSIS
\f[CR]hledger\-web [OPTS] [QUERY]\f[R]
.PD 0
.P
.PD
or
.PD 0
.P
.PD
\f[CR]hledger web [OPTS] [QUERY]\f[R]
.SH DESCRIPTION
This manual is for hledger\[aq]s web interface, version 1.50.99.
See also the hledger manual for common concepts and file formats.
.PP
hledger is a robust, user\-friendly, cross\-platform set of programs for
tracking money, time, or any other commodity, using double\-entry
accounting and a simple, editable file format.
hledger is inspired by and largely compatible with ledger(1), and
largely interconvertible with beancount(1).
.PP
hledger\-web is a simple web application for browsing and adding
transactions.
It provides a more user\-friendly UI than the hledger CLI or hledger\-ui
TUI, showing more at once (accounts, the current account register,
balance charts) and allowing history\-aware data entry, interactive
searching, and bookmarking.
.PP
hledger\-web also lets you share a journal with multiple users, or even
the public web.
There is no access control, so if you need that you should put it behind
a suitable web proxy.
As a small protection against data loss when running an unprotected
instance, it writes a numbered backup of the main journal file (only) on
every edit.
.PP
Like hledger, it reads from (and appends to) a journal file specified by
the \f[CR]LEDGER_FILE\f[R] environment variable (defaulting to
\f[CR]$HOME/.hledger.journal\f[R]); or you can specify files with
\f[CR]\-f\f[R] options.
It can also read timeclock files, timedot files, or any CSV/SSV/TSV file
with a date field.
(See hledger(1) \-> Input for details.)
.PP
hledger\-web can be run in three modes:
.IP \[bu] 2
\f[CR]\-\-serve\-browse\f[R] mode (the default): the app serves the web
UI and JSON API, and opens your default web browser to show the app if
possible, and exits automatically after two minutes of inactivity (with
no requests received and no open browser windows viewing it).
.IP \[bu] 2
\f[CR]\-\-serve\f[R]: the app just serves the web UI and JSON API.
.IP \[bu] 2
\f[CR]\-\-serve\-api\f[R]: the app just serves the JSON API.
.PP
In all cases hledger\-web runs as a foreground process, logging requests
to stdout.
.SH OPTIONS
hledger\-web provides the following options:
.IP
.EX
Flags:
     \-\-serve \-\-server       serve and log requests, don\[aq]t browse or auto\-exit
     \-\-serve\-api            like \-\-serve, but serve only the JSON web API,
                            not the web UI
     \-\-allow=view|add|edit  set the user\[aq]s access level for changing data
                            (default: \[ga]add\[ga]). It also accepts \[ga]sandstorm\[ga] for
                            use on that platform (reads permissions from the
                            \[ga]X\-Sandstorm\-Permissions\[ga] request header).
     \-\-cors=ORIGIN          allow cross\-origin requests from the specified
                            origin; setting ORIGIN to \[dq]*\[dq] allows requests from
                            any origin
     \-\-host=IPADDR          listen on this IP address (default: 127.0.0.1)
     \-\-port=PORT            listen on this TCP port (default: 5000)
     \-\-socket=SOCKET        listen on the given unix socket instead of an IP
                            address and port (unix only; implies \-\-serve)
     \-\-base\-url=BASEURL     set the base url (default: http://IPADDR:PORT)
     \-\-test                 run hledger\-web\[aq]s tests and exit. hspec test
                            runner args may follow a \-\-, eg: hledger\-web \-\-test
                            \-\-help
.EE
.PP
By default hledger\-web listens only on IP address \f[CR]127.0.0.1\f[R],
which be accessed only from the local machine.
.PP
To allow access from elsewhere, use \f[CR]\-\-host\f[R] to specify an
externally accessible address configured on this machine, The special
address \f[CR]0.0.0.0\f[R] causes it to listen on all of this
machine\[aq]s addresses.
.PP
Similarly, you can use \f[CR]\-\-port\f[R] to listen on a TCP port other
than 5000.
This is useful if you want to run multiple hledger\-web instances on a
machine.
.PP
When \f[CR]\-\-socket\f[R] is used, hledger\-web creates and
communicates via a socket file instead of a TCP port.
This can be more secure, respects unix file permissions, and makes
certain use cases easier, such as running per\-user instances behind an
nginx reverse proxy.
(Eg:
\f[CR]proxy_pass http://unix:/tmp/hledger/${remote_user}.socket;\f[R].)
.PP
You can use \f[CR]\-\-base\-url\f[R] to change the protocol, hostname,
port and path that appear in hledger\-web\[aq]s hyperlinks.
This is useful eg when integrating hledger\-web within a larger website.
The default is \f[CR]http://HOST:PORT/\f[R] using the server\[aq]s
configured host address and TCP port (or \f[CR]http://HOST\f[R] if PORT
is 80).
Note this affects url generation but not route parsing.
.PP
hledger\-web also supports many of hledger\[aq]s general options:
.IP
.EX
General input/data transformation flags:
  \-f \-\-file=[FMT:]FILE      Read data from FILE, or from stdin if FILE is \-,
                            inferring format from extension or a FMT: prefix.
                            Can be specified more than once. If not specified,
                            reads from $LEDGER_FILE or $HOME/.hledger.journal.
     \-\-rules=RULESFILE      Use rules defined in this rules file for
                            converting subsequent CSV/SSV/TSV files. If not
                            specified, uses FILE.csv.rules for each FILE.csv.
     \-\-alias=A=B|/RGX/=RPL  transform account names from A to B, or by
                            replacing regular expression matches
     \-\-auto                 generate extra postings by applying auto posting
                            rules (\[dq]=\[dq]) to all transactions
     \-\-forecast[=PERIOD]    Generate extra transactions from periodic rules
                            (\[dq]\[ti]\[dq]), from after the latest ordinary transaction
                            until 6 months from now. Or, during the specified
                            PERIOD (the equals is required). Auto posting rules
                            will also be applied to these transactions. In
                            hledger\-ui, also make future\-dated transactions
                            visible at startup.
  \-I \-\-ignore\-assertions    don\[aq]t check balance assertions by default
     \-\-txn\-balancing=...    how to check that transactions are balanced:
                            \[aq]old\[aq]:   use global display precision
                            \[aq]exact\[aq]: use transaction precision (default)
     \-\-infer\-costs          infer conversion equity postings from costs
     \-\-infer\-equity         infer costs from conversion equity postings
     \-\-infer\-market\-prices  infer market prices from costs
     \-\-pivot=TAGNAME        use a different field or tag as account names
  \-s \-\-strict               do extra error checks (and override \-I)
     \-\-verbose\-tags         add tags indicating generated/modified data

General output/reporting flags (supported by some commands):
  \-b \-\-begin=DATE           include postings/transactions on/after this date
  \-e \-\-end=DATE             include postings/transactions before this date
                            (with a report interval, will be adjusted to
                            following subperiod end)
  \-D \-\-daily                multiperiod report with 1 day interval
  \-W \-\-weekly               multiperiod report with 1 week interval
  \-M \-\-monthly              multiperiod report with 1 month interval
  \-Q \-\-quarterly            multiperiod report with 1 quarter interval
  \-Y \-\-yearly               multiperiod report with 1 year interval
  \-p \-\-period=PERIODEXP     set begin date, end date, and/or report interval,
                            with more flexibility
     \-\-today=DATE           override today\[aq]s date (affects relative dates)
     \-\-date2                match/use secondary dates instead (deprecated)
  \-U \-\-unmarked             include only unmarked postings/transactions
  \-P \-\-pending              include only pending postings/transactions
  \-C \-\-cleared              include only cleared postings/transactions
                            (\-U/\-P/\-C can be combined)
  \-R \-\-real                 include only non\-virtual postings
  \-E \-\-empty                Show zero items, which are normally hidden.
                            In hledger\-ui & hledger\-web, do the opposite.
     \-\-depth=DEPTHEXP       if a number (or \-NUM): show only top NUM levels
                            of accounts. If REGEXP=NUM, only apply limiting to
                            accounts matching the regular expression.
  \-B \-\-cost                 show amounts converted to their cost/sale amount
  \-V \-\-market               Show amounts converted to their value at period
                            end(s) in their default valuation commodity.
                            Equivalent to \-\-value=end.
  \-X \-\-exchange=COMM        Show amounts converted to their value at period
                            end(s) in the specified commodity.
                            Equivalent to \-\-value=end,COMM.
     \-\-value=WHEN[,COMM]    show amounts converted to their value on the
                            specified date(s) in their default valuation
                            commodity or a specified commodity. WHEN can be:
                            \[aq]then\[aq]:     value on transaction dates
                            \[aq]end\[aq]:      value at period end(s)
                            \[aq]now\[aq]:      value today
                            YYYY\-MM\-DD: value on given date
  \-c \-\-commodity\-style=S    Override a commodity\[aq]s display style.
                            Eg: \-c \[aq].\[aq] or \-c \[aq]1.000,00 EUR\[aq]
     \-\-pretty[=YN]          Use box\-drawing characters in text output? Can be
                            \[aq]y\[aq]/\[aq]yes\[aq] or \[aq]n\[aq]/\[aq]no\[aq].
                            If YN is specified, the equals is required.

General help flags:
  \-h \-\-help                 show command line help
     \-\-tldr                 show command examples with tldr
     \-\-info                 show the manual with info
     \-\-man                  show the manual with man
     \-\-version              show version information
     \-\-debug=[1\-9]          show this much debug output (default: 1)
     \-\-pager=YN             use a pager when needed ? y/yes (default) or n/no
     \-\-color=YNA \-\-colour   use ANSI color ? y/yes, n/no, or auto (default)
.EE
.PP
hledger\-web shows accounts with zero balances by default (like
\f[CR]hledger\-ui\f[R], and unlike \f[CR]hledger\f[R]).
Using the \f[CR]\-E/\-\-empty\f[R] flag will reverse this behaviour.
If you see accounts which appear to have a zero balance, but cannot be
hidden with \f[CR]\-E\f[R], it\[aq]s because they have a mixed\-cost
balance, which looks like zero when costs are hidden.
(hledger\-web does not show costs.)
.PP
Reporting options and/or query arguments can be used to set an initial
query, which although not shown in the UI, will restrict the data shown
(in addition to any search query entered in the UI).
.PP
If you use the bash shell, you can auto\-complete flags by pressing TAB
in the command line.
If this is not working see Install > Shell completions.
.SH PERMISSIONS
By default, hledger\-web allows anyone who can reach it to view the
journal and to add new transactions, but not to change existing data.
.PP
You can restrict who can reach it, by
.IP \[bu] 2
setting the IP address it listens on (see \f[CR]\-\-host\f[R] above).
By default it listens on 127.0.0.1, accessible to users on the local
machine only.
.IP \[bu] 2
putting it behind an authenticating proxy, such as caddy or apache
.IP \[bu] 2
putting it behind a firewall
.PP
And you can restrict what the users reaching it can do, by specifying
the \f[CR]\-\-allow=ACCESSLEVEL\f[R] option at startup.
ACCESSLEVEL is one of:
.IP \[bu] 2
\f[CR]view\f[R] \- allows viewing the journal file(s)
.IP \[bu] 2
\f[CR]add\f[R] \- also allows adding new transactions to the main
journal file
.IP \[bu] 2
\f[CR]edit\f[R] \- also allows editing, uploading or downloading the
journal file(s)
.IP \[bu] 2
\f[CR]sandstorm\f[R] \- (for the hledger\-web Sandstorm app:) allows
whichever of \f[CR]view\f[R], \f[CR]add\f[R], or \f[CR]edit\f[R] are
specified in the \f[CR]X\-Sandstorm\-Permissions\f[R] HTTP header
.PP
The default access level is \f[CR]add\f[R].
.SH EDITING, UPLOADING, DOWNLOADING
If you enable the \f[CR]manage\f[R] capability mentioned above,
you\[aq]ll see a new \[dq]spanner\[dq] button to the right of the search
form.
Clicking this will let you edit, upload, or download the journal file or
any files it includes.
.PP
Note, unlike any other hledger command, in this mode you (or any
visitor) can alter or wipe the data files.
.PP
Normally whenever a file is changed in this way, hledger\-web saves a
numbered backup (assuming file permissions allow it, the disk is not
full, etc.)
hledger\-web is not aware of version control systems, currently; if you
use one, you\[aq]ll have to arrange to commit the changes yourself (eg
with a cron job or a file watcher like entr).
.PP
Changes which would leave the journal file(s) unparseable or non\-valid
(eg with failing balance assertions) are prevented.
(Probably.
This needs re\-testing.)
.SH RELOADING
hledger\-web detects changes made to the files by other means (eg if you
edit it directly, outside of hledger\-web), and it will show the new
data when you reload the page or navigate to a new page.
If a change makes a file unparseable, hledger\-web will display an error
message until the file has been fixed.
.PP
(Note: if you are viewing files mounted from another machine, make sure
that both machine clocks are roughly in step.)
.SH JSON API
In addition to the web UI, hledger\-web also serves a JSON API that can
be used to get data or add new transactions.
If you want the JSON API only, you can use the \f[CR]\-\-serve\-api\f[R]
flag.
Eg:
.IP
.EX
$ hledger\-web \-f examples/sample.journal \-\-serve\-api
\&...
.EE
.PP
You can get JSON data from these routes:
.IP
.EX
/version
/accountnames
/transactions
/prices
/commodities
/accounts
/accounttransactions/ACCOUNTNAME
.EE
.PP
Eg, all account names in the journal (similar to the accounts command).
(hledger\-web\[aq]s JSON does not include newlines, here we use python
to prettify it):
.IP
.EX
$ curl \-s http://127.0.0.1:5000/accountnames | python \-m json.tool
[
    \[dq]assets\[dq],
    \[dq]assets:bank\[dq],
    \[dq]assets:bank:checking\[dq],
    \[dq]assets:bank:saving\[dq],
    \[dq]assets:cash\[dq],
    \[dq]expenses\[dq],
    \[dq]expenses:food\[dq],
    \[dq]expenses:supplies\[dq],
    \[dq]income\[dq],
    \[dq]income:gifts\[dq],
    \[dq]income:salary\[dq],
    \[dq]liabilities\[dq],
    \[dq]liabilities:debts\[dq]
]
.EE
.PP
Or all transactions:
.IP
.EX
$ curl \-s http://127.0.0.1:5000/transactions | python \-m json.tool
[
    {
        \[dq]tcode\[dq]: \[dq]\[dq],
        \[dq]tcomment\[dq]: \[dq]\[dq],
        \[dq]tdate\[dq]: \[dq]2008\-01\-01\[dq],
        \[dq]tdate2\[dq]: null,
        \[dq]tdescription\[dq]: \[dq]income\[dq],
        \[dq]tindex\[dq]: 1,
        \[dq]tpostings\[dq]: [
            {
                \[dq]paccount\[dq]: \[dq]assets:bank:checking\[dq],
                \[dq]pamount\[dq]: [
                    {
                        \[dq]acommodity\[dq]: \[dq]$\[dq],
                        \[dq]aismultiplier\[dq]: false,
                        \[dq]aprice\[dq]: null,
\&...
.EE
.PP
Most of the JSON corresponds to hledger\[aq]s data types; for details of
what the fields mean, see the Hledger.Data.Json haddock docs and click
on the various data types, eg Transaction.
And for a higher level understanding, see the journal docs.
There is also a basic OpenAPI specification.
.PP
In some cases there is outer JSON corresponding to a \[dq]Report\[dq]
type.
To understand that, go to the Hledger.Web.Handler.MiscR haddock and look
at the source for the appropriate handler to see what it returns.
Eg for \f[CR]/accounttransactions\f[R] it\[aq]s getAccounttransactionsR,
returning a \[dq]\f[CR]accountTransactionsReport ...\f[R]\[dq].
Looking up the haddock for that we can see that /accounttransactions
returns an AccountTransactionsReport, which consists of a report title
and a list of AccountTransactionsReportItem (etc).
.PP
You can add a new transaction to the journal with a PUT request to
\f[CR]/add\f[R], if hledger\-web was started with the \f[CR]add\f[R]
capability (enabled by default).
The payload must be the full, exact JSON representation of a hledger
transaction (partial data won\[aq]t do).
You can get sample JSON from hledger\-web\[aq]s \f[CR]/transactions\f[R]
or \f[CR]/accounttransactions\f[R], or you can export it with
hledger\-lib, eg like so:
.IP
.EX
\&.../hledger$ stack ghci hledger\-lib
>>> writeJsonFile \[dq]txn.json\[dq] (head $ jtxns samplejournal)
>>> :q
.EE
.PP
Here\[aq]s how it looks as of hledger\-1.17 (remember, this JSON
corresponds to hledger\[aq]s Transaction and related data types):
.IP
.EX
{
    \[dq]tcomment\[dq]: \[dq]\[dq],
    \[dq]tpostings\[dq]: [
        {
            \[dq]pbalanceassertion\[dq]: \f[B]null\f[R],
            \[dq]pstatus\[dq]: \[dq]Unmarked\[dq],
            \[dq]pamount\[dq]: [
                {
                    \[dq]aprice\[dq]: \f[B]null\f[R],
                    \[dq]acommodity\[dq]: \[dq]$\[dq],
                    \[dq]aquantity\[dq]: {
                        \[dq]floatingPoint\[dq]: 1,
                        \[dq]decimalPlaces\[dq]: 10,
                        \[dq]decimalMantissa\[dq]: 10000000000
                    },
                    \[dq]aismultiplier\[dq]: \f[B]false\f[R],
                    \[dq]astyle\[dq]: {
                        \[dq]ascommodityside\[dq]: \[dq]L\[dq],
                        \[dq]asdigitgroups\[dq]: \f[B]null\f[R],
                        \[dq]ascommodityspaced\[dq]: \f[B]false\f[R],
                        \[dq]asprecision\[dq]: 2,
                        \[dq]asdecimalpoint\[dq]: \[dq].\[dq]
                    }
                }
            ],
            \[dq]ptransaction_\[dq]: \[dq]1\[dq],
            \[dq]paccount\[dq]: \[dq]assets:bank:checking\[dq],
            \[dq]pdate\[dq]: \f[B]null\f[R],
            \[dq]ptype\[dq]: \[dq]RegularPosting\[dq],
            \[dq]pcomment\[dq]: \[dq]\[dq],
            \[dq]pdate2\[dq]: \f[B]null\f[R],
            \[dq]ptags\[dq]: [],
            \[dq]poriginal\[dq]: \f[B]null\f[R]
        },
        {
            \[dq]pbalanceassertion\[dq]: \f[B]null\f[R],
            \[dq]pstatus\[dq]: \[dq]Unmarked\[dq],
            \[dq]pamount\[dq]: [
                {
                    \[dq]aprice\[dq]: \f[B]null\f[R],
                    \[dq]acommodity\[dq]: \[dq]$\[dq],
                    \[dq]aquantity\[dq]: {
                        \[dq]floatingPoint\[dq]: \-1,
                        \[dq]decimalPlaces\[dq]: 10,
                        \[dq]decimalMantissa\[dq]: \-10000000000
                    },
                    \[dq]aismultiplier\[dq]: \f[B]false\f[R],
                    \[dq]astyle\[dq]: {
                        \[dq]ascommodityside\[dq]: \[dq]L\[dq],
                        \[dq]asdigitgroups\[dq]: \f[B]null\f[R],
                        \[dq]ascommodityspaced\[dq]: \f[B]false\f[R],
                        \[dq]asprecision\[dq]: 2,
                        \[dq]asdecimalpoint\[dq]: \[dq].\[dq]
                    }
                }
            ],
            \[dq]ptransaction_\[dq]: \[dq]1\[dq],
            \[dq]paccount\[dq]: \[dq]income:salary\[dq],
            \[dq]pdate\[dq]: \f[B]null\f[R],
            \[dq]ptype\[dq]: \[dq]RegularPosting\[dq],
            \[dq]pcomment\[dq]: \[dq]\[dq],
            \[dq]pdate2\[dq]: \f[B]null\f[R],
            \[dq]ptags\[dq]: [],
            \[dq]poriginal\[dq]: \f[B]null\f[R]
        }
    ],
    \[dq]ttags\[dq]: [],
    \[dq]tsourcepos\[dq]: {
        \[dq]tag\[dq]: \[dq]JournalSourcePos\[dq],
        \[dq]contents\[dq]: [
            \[dq]\[dq],
            [
                1,
                1
            ]
        ]
    },
    \[dq]tdate\[dq]: \[dq]2008\-01\-01\[dq],
    \[dq]tcode\[dq]: \[dq]\[dq],
    \[dq]tindex\[dq]: 1,
    \[dq]tprecedingcomment\[dq]: \[dq]\[dq],
    \[dq]tdate2\[dq]: \f[B]null\f[R],
    \[dq]tdescription\[dq]: \[dq]income\[dq],
    \[dq]tstatus\[dq]: \[dq]Unmarked\[dq]
}
.EE
.PP
And here\[aq]s how to test adding it with curl.
This should add a new entry to your journal:
.IP
.EX
$ curl http://127.0.0.1:5000/add \-X PUT \-H \[aq]Content\-Type: application/json\[aq] \-\-data\-binary \[at]txn.json
.EE
.SH DEBUG OUTPUT
.SS Debug output
You can add \f[CR]\-\-debug[=N]\f[R] to the command line to log debug
output.
N ranges from 1 (least output, the default) to 9 (maximum output).
Typically you would start with 1 and increase until you are seeing
enough.
Debug output goes to stderr, interleaved with the requests logged on
stdout.
To capture debug output in a log file instead, you can usually redirect
stderr, eg:
.PD 0
.P
.PD
\f[CR]hledger\-web \-\-debug=3 2>hledger\-web.log\f[R].
.SH ENVIRONMENT
\f[B]LEDGER_FILE\f[R] The main journal file to use when not specified
with \f[CR]\-f/\-\-file\f[R].
Default: \f[CR]$HOME/.hledger.journal\f[R].
.SH BUGS
We welcome bug reports in the hledger issue tracker
(https://bugs.hledger.org), or on the hledger chat or mail list
(https://hledger.org/support).
.PP
Some known issues:
.PP
Does not work well on small screens, or in text\-mode browsers.


.SH AUTHORS
Simon Michael <simon@joyful.com> and contributors.
.br
See http://hledger.org/CREDITS.html

.SH COPYRIGHT
Copyright 2007-2023 Simon Michael and contributors.

.SH LICENSE
Released under GNU GPL v3 or later.

.SH SEE ALSO
hledger(1), hledger\-ui(1), hledger\-web(1), ledger(1)
