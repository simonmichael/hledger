# print amount styling tests
#
# Here's an overview of historical behaviour.
# See the tests below for examples.
#
# print shows four kinds of amount:
#  amt     - posting amount
#  cost    - posting amount's cost
#  bal     - balance assertion/assignment amount
#  balcost - balance assertion/assignment amount's cost
#
#  Which amounts does print do basic styling (eg symbol placement) on ?
#  
#  | hledger   | amt | cost | bal | balcost |
#  |-----------|-----|------|-----|---------|
#  | 1.1-1.14  | Y   | N    | N   | N       |
#  | 1.15-1.22 | Y   | N    | Y   | N       |
#  | 1.23-1.30 | Y   | Y    | Y   | N       |
#  |           |     |      |     |         |
#  | 1.31-     | Y   | Y    | Y   | Y       |
#  
#  Which kind of rounding does print do on each amount ?
#  
#  | hledger             | amt  | cost | bal  | balcost |
#  |---------------------|------|------|------|---------|
#  | 1.0-1.20            | hard | none | none | none    |
#  | 1.21-1.30           | soft | none | none | none    |
#  | 1.31                | none | none | none | none    |
#  |                     |      |      |      |         |
#  | 1.31.1              | none | none | none | none    |
#  | 1.31.1 --round=soft | soft | none | soft | none    |
#  | 1.31.1 --round=hard | hard | none | hard | none    |
#  | 1.31.1 --round=all  | hard | hard | hard | hard    |


# Four print style tests. In these, basic styling is applied
# to all amounts (the commodity symbol moves to the left),
# and precision styling is applied as described below.
<
; A and B styles
commodity A1000.00
commodity B1000.00

; a amounts have 1 significant digit
; b amounts have 1 significant digit and 2 zeros
; c amounts have 3 significant digits
2023-01-01
    (a)    0.1   A @ 0.1   B = 0.1   A @ 0.1   B
    (b)    0.100 A @ 0.100 B = 0.100 A @ 0.100 B
    (c)    0.123 A @ 0.123 B = 0.123 A @ 0.123 B

# 1. By default, print shows all amounts with original precisions
# (like 1.31)
$ hledger -f- print
2023-01-01
    (a)        A0.1 @ B0.1 = A0.1 @ B0.1
    (b)    A0.100 @ B0.100 = A0.100 @ B0.100
    (c)    A0.123 @ B0.123 = A0.123 @ B0.123

>=

# 2. With --round=soft, print adds/removes zeros in non-cost amounts
# (like 1.30 but more thorough, also affects balance assertion amounts,
# also does basic styling of balance assertion costs)
$ hledger -f- print --round=soft
2023-01-01
    (a)       A0.10 @ B0.1 = A0.10 @ B0.1
    (b)     A0.10 @ B0.100 = A0.10 @ B0.100
    (c)    A0.123 @ B0.123 = A0.123 @ B0.123

>=

# 3. With --round=hard, print rounds non-cost amounts.
$ hledger -f- print --round=hard
2023-01-01
    (a)      A0.10 @ B0.1 = A0.10 @ B0.1
    (b)    A0.10 @ B0.100 = A0.10 @ B0.100
    (c)    A0.12 @ B0.123 = A0.12 @ B0.123

>=

# 4. with --round=all, print rounds all amounts.
$ hledger -f- print --round=all
2023-01-01
    (a)    A0.10 @ B0.10 = A0.10 @ B0.10
    (b)    A0.10 @ B0.10 = A0.10 @ B0.10
    (c)    A0.12 @ B0.12 = A0.12 @ B0.12

>=

# 5. print also preserves precisions when there's an implicit conversion
# (unlike 1.30, #2079).
<
commodity A 1000.

2023-01-01
    f       A 1.5
    g       A 1.5
    c      B -3

$ hledger -f- print
2023-01-01
    f           A 1.5
    g           A 1.5
    c            B -3

>=

# 6. When showing digit group marks, print always shows a decimal mark as well,
# even when no decimal digits are shown.
<
decimal-mark .
2023-01-01
    (a)    1,000

$ hledger -f- print
2023-01-01
    (a)          1,000.

>=

# 7. print shows zeros with a commodity symbol and decimal digits when possible.
# This also means that "multi-commodity zeros" are shown more verbosely.
<
2023-01-01
    a   A 0.00
    b   B 0.00
    c

2023-01-02
    d

$ hledger -f- print -x
2023-01-01
    a          A 0.00
    b          B 0.00
    c          A 0.00
    c          B 0.00

2023-01-02
    d               0

>=