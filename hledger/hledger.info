This is hledger.info, produced by makeinfo version 6.5 from stdin.


File: hledger.info,  Node: Top,  Next: EXAMPLES,  Up: (dir)

hledger(1) hledger 1.9.99
*************************

This is hledger's command-line interface (there are also curses and web
interfaces).  Its basic function is to read a plain text file describing
financial transactions (in accounting terms, a general journal) and
print useful reports on standard output, or export them as CSV. hledger
can also read some other file formats such as CSV files, translating
them to journal format.  Additionally, hledger lists other hledger-*
executables found in the user's $PATH and can invoke them as
subcommands.

   hledger reads data from one or more files in hledger journal,
timeclock, timedot, or CSV format specified with '-f', or
'$LEDGER_FILE', or '$HOME/.hledger.journal' (on windows, perhaps
'C:/Users/USER/.hledger.journal').  If using '$LEDGER_FILE', note this
must be a real environment variable, not a shell variable.  You can
specify standard input with '-f-'.

   Transactions are dated movements of money between two (or more) named
accounts, and are recorded with journal entries like this:

2015/10/16 bought food
 expenses:food          $10
 assets:cash

   For more about this format, see hledger_journal(5).

   Most users use a text editor to edit the journal, usually with an
editor mode such as ledger-mode for added convenience.  hledger's
interactive add command is another way to record new transactions.
hledger never changes existing transactions.

   To get started, you can either save some entries like the above in
'~/.hledger.journal', or run 'hledger add' and follow the prompts.  Then
try some commands like 'hledger print' or 'hledger balance'.  Run
'hledger' with no arguments for a list of commands.
* Menu:

* EXAMPLES::
* OPTIONS::
* QUERIES::
* COMMANDS::
* ADD-ON COMMANDS::


File: hledger.info,  Node: EXAMPLES,  Next: OPTIONS,  Prev: Top,  Up: Top

1 EXAMPLES
**********

Two simple transactions in hledger journal format:

2015/9/30 gift received
  assets:cash   $20
  income:gifts

2015/10/16 farmers market
  expenses:food    $10
  assets:cash

   Some basic reports:

$ hledger print
2015/09/30 gift received
    assets:cash            $20
    income:gifts          $-20

2015/10/16 farmers market
    expenses:food           $10
    assets:cash            $-10

$ hledger accounts --tree
assets
  cash
expenses
  food
income
  gifts

$ hledger balance
                 $10  assets:cash
                 $10  expenses:food
                $-20  income:gifts
--------------------
                   0

$ hledger register cash
2015/09/30 gift received   assets:cash               $20           $20
2015/10/16 farmers market  assets:cash              $-10           $10

   More commands:

$ hledger                                 # show available commands
$ hledger add                             # add more transactions to the journal file
$ hledger balance                         # all accounts with aggregated balances
$ hledger balance --help                  # show detailed help for balance command
$ hledger balance --depth 1               # only top-level accounts
$ hledger register                        # show account postings, with running total
$ hledger reg income                      # show postings to/from income accounts
$ hledger reg 'assets:some bank:checking' # show postings to/from this checking account
$ hledger print desc:shop                 # show transactions with shop in the description
$ hledger activity -W                     # show transaction counts per week as a bar chart


File: hledger.info,  Node: OPTIONS,  Next: QUERIES,  Prev: EXAMPLES,  Up: Top

2 OPTIONS
*********

* Menu:

* General options::
* Command options::
* Command arguments::
* Argument files::
* Special characters::
* Input files::
* Smart dates::
* Report start & end date::
* Report intervals::
* Period expressions::
* Depth limiting::
* Pivoting::
* Cost::
* Market value::
* Combining -B and -V::
* Output destination::
* Output format::
* Regular expressions::


File: hledger.info,  Node: General options,  Next: Command options,  Up: OPTIONS

2.1 General options
===================

To see general usage help, including general options which are supported
by most hledger commands, run 'hledger -h'.

   General help options:

'-h --help'

     show general usage (or after COMMAND, command usage)
'--version'

     show version
'--debug[=N]'

     show debug output (levels 1-9, default: 1)

   General input options:

'-f FILE --file=FILE'

     use a different input file.  For stdin, use - (default:
     '$LEDGER_FILE' or '$HOME/.hledger.journal')
'--rules-file=RULESFILE'

     Conversion rules file to use when reading CSV (default: FILE.rules)
'--alias=OLD=NEW'

     rename accounts named OLD to NEW
'--anon'

     anonymize accounts and payees
'--pivot FIELDNAME'

     use some other field or tag for the account name
'-I --ignore-assertions'

     ignore any failing balance assertions

   General reporting options:

'-b --begin=DATE'

     include postings/txns on or after this date
'-e --end=DATE'

     include postings/txns before this date
'-D --daily'

     multiperiod/multicolumn report by day
'-W --weekly'

     multiperiod/multicolumn report by week
'-M --monthly'

     multiperiod/multicolumn report by month
'-Q --quarterly'

     multiperiod/multicolumn report by quarter
'-Y --yearly'

     multiperiod/multicolumn report by year
'-p --period=PERIODEXP'

     set start date, end date, and/or reporting interval all at once
     using period expressions syntax (overrides the flags above)
'--date2'

     match the secondary date instead (see command help for other
     effects)
'-U --unmarked'

     include only unmarked postings/txns (can combine with -P or -C)
'-P --pending'

     include only pending postings/txns
'-C --cleared'

     include only cleared postings/txns
'-R --real'

     include only non-virtual postings
'-NUM --depth=NUM'

     hide/aggregate accounts or postings more than NUM levels deep
'-E --empty'

     show items with zero amount, normally hidden (and vice-versa in
     hledger-ui/hledger-web)
'-B --cost'

     convert amounts to their cost at transaction time (using the
     transaction price, if any)
'-V --value'

     convert amounts to their market value on the report end date (using
     the most recent applicable market price, if any)
'--auto'

     apply automated posting rules to modify transactions.
'--forecast'

     apply periodic transaction rules to generate future transactions,
     to 6 months from now or report end date.

   When a reporting option appears more than once in the command line,
the last one takes precedence.

   Some reporting options can also be written as query arguments.


File: hledger.info,  Node: Command options,  Next: Command arguments,  Prev: General options,  Up: OPTIONS

2.2 Command options
===================

To see options for a particular command, including command-specific
options, run: 'hledger COMMAND -h'.

   Command-specific options must be written after the command name, eg:
'hledger print -x'.

   Additionally, if the command is an addon, you may need to put its
options after a double-hyphen, eg: 'hledger ui -- --watch'.  Or, you can
run the addon executable directly: 'hledger-ui --watch'.


File: hledger.info,  Node: Command arguments,  Next: Argument files,  Prev: Command options,  Up: OPTIONS

2.3 Command arguments
=====================

Most hledger commands accept arguments after the command name, which are
often a query, filtering the data in some way.


File: hledger.info,  Node: Argument files,  Next: Special characters,  Prev: Command arguments,  Up: OPTIONS

2.4 Argument files
==================

You can save a set of command line options/arguments in a file, one per
line, and then reuse them by writing '@FILENAME' in a command line.  To
prevent this expansion of '@'-arguments, precede them with a '--'
argument.  For more, see Save frequently used options.


File: hledger.info,  Node: Special characters,  Next: Input files,  Prev: Argument files,  Up: OPTIONS

2.5 Special characters
======================

Option and argument values which contain problematic characters should
be escaped with double quotes, backslashes, or (best) single quotes.
Problematic characters means spaces, and also characters which are
significant to your command shell, such as less-than/greater-than.  Eg:
'hledger register -p 'last year' "accounts receivable
(receivable|payable)" amt:\>100'.

   Characters which are significant both to the shell and in regular
expressions sometimes need to be double-escaped.  These include
parentheses, the pipe symbol and the dollar sign.  Eg, to match the
dollar symbol, bash users should do: 'hledger balance cur:'\$'' or
'hledger balance cur:\\$'.

   When hledger is invoking an addon executable (like hledger-ui),
options and arguments get de-escaped once more, so you might need
_triple_-escaping.  Eg: 'hledger ui cur:'\\$'' or 'hledger ui cur:\\\\$'
in bash.  (The number of backslashes in fish shell is left as an
exercise for the reader.)

   Inside a file used for argument expansion, one less level of escaping
is enough.  (And in this case, backslashes seem to work better than
quotes.  Eg: 'cur:\$').

   If in doubt, keep things simple:

   * run add-on executables directly
   * write options after the command
   * enclose problematic args in single quotes
   * if needed, also add a backslash to escape regexp metacharacters

   If you're really stumped, add '--debug=2' to troubleshoot.


File: hledger.info,  Node: Input files,  Next: Smart dates,  Prev: Special characters,  Up: OPTIONS

2.6 Input files
===============

hledger reads transactions from a data file (and the add command writes
to it).  By default this file is '$HOME/.hledger.journal' (or on
Windows, something like 'C:/Users/USER/.hledger.journal').  You can
override this with the '$LEDGER_FILE' environment variable:

$ setenv LEDGER_FILE ~/finance/2016.journal
$ hledger stats

   or with the '-f/--file' option:

$ hledger -f /some/file stats

   The file name '-' (hyphen) means standard input:

$ cat some.journal | hledger -f-

   Usually the data file is in hledger's journal format, but it can also
be one of several other formats, listed below.  hledger detects the
format automatically based on the file extension, or if that is not
recognised, by trying each built-in "reader" in turn:

Reader:     Reads:                              Used for file extensions:
----------------------------------------------------------------------------
'journal'   hledger's journal format, also      '.journal' '.j'
            some Ledger journals                '.hledger' '.ledger'
'timeclock' timeclock files (precise time       '.timeclock'
            logging)
'timedot'   timedot files (approximate time     '.timedot'
            logging)
'csv'       comma-separated values (data        '.csv'
            interchange)

   If needed (eg to ensure correct error messages when a file has the
"wrong" extension), you can force a specific reader/format by prepending
it to the file path with a colon.  Examples:

$ hledger -f csv:/some/csv-file.dat stats
$ echo 'i 2009/13/1 08:00:00' | hledger print -ftimeclock:-

   You can also specify multiple '-f' options, to read multiple files as
one big journal.  There are some limitations with this:

   * directives in one file will not affect the other files
   * balance assertions will not see any account balances from previous
     files

   If you need those, either use the include directive, or concatenate
the files, eg: 'cat a.journal b.journal | hledger -f- CMD'.


File: hledger.info,  Node: Smart dates,  Next: Report start & end date,  Prev: Input files,  Up: OPTIONS

2.7 Smart dates
===============

hledger's user interfaces accept a flexible "smart date" syntax (unlike
dates in the journal file).  Smart dates allow some english words, can
be relative to today's date, and can have less-significant date parts
omitted (defaulting to 1).

   Examples:

'2004/10/1', '2004-01-01', '2004.9.1'   exact date, several separators allowed.  Year is 4+ digits, month is 1-12, day is 1-31
'2004'                                  start of year
'2004/10'                               start of month
'10/1'                                  month and day in current year
'21'                                    day in current month
'october, oct'                          start of month in current year
'yesterday, today, tomorrow'            -1, 0, 1 days from today
'last/this/next                         -1, 0, 1 periods from the current period
day/week/month/quarter/year'
'20181201'                              8 digit YYYYMMDD with valid year month and day
'201812'                                6 digit YYYYMM with valid year and month

   Counterexamples - malformed digit sequences might give surprising
results:

'201813'      6 digits with an invalid month is parsed as start of 6-digit year
'20181301'    8 digits with an invalid month is parsed as start of 8-digit year
'20181232'    8 digits with an invalid day gives an error
'201801012'   9+ digits beginning with a valid YYYYMMDD gives an error


File: hledger.info,  Node: Report start & end date,  Next: Report intervals,  Prev: Smart dates,  Up: OPTIONS

2.8 Report start & end date
===========================

Most hledger reports show the full span of time represented by the
journal data, by default.  So, the effective report start and end dates
will be the earliest and latest transaction or posting dates found in
the journal.

   Often you will want to see a shorter time span, such as the current
month.  You can specify a start and/or end date using '-b/--begin',
'-e/--end', '-p/--period' or a 'date:' query (described below).  All of
these accept the smart date syntax.  One important thing to be aware of
when specifying end dates: as in Ledger, end dates are exclusive, so you
need to write the date _after_ the last day you want to include.

   Examples:

'-b 2016/3/17'      begin on St. Patrick's day 2016
'-e 12/1'           end at the start of december 1st of the current year (11/30 will be the last date included)
'-b thismonth'      all transactions on or after the 1st of the current month
'-p thismonth'      all transactions in the current month
'date:2016/3/17-'   the above written as queries instead
'date:-12/1'
'date:thismonth-'
'date:thismonth'


File: hledger.info,  Node: Report intervals,  Next: Period expressions,  Prev: Report start & end date,  Up: OPTIONS

2.9 Report intervals
====================

A report interval can be specified so that commands like register,
balance and activity will divide their reports into multiple subperiods.
The basic intervals can be selected with one of '-D/--daily',
'-W/--weekly', '-M/--monthly', '-Q/--quarterly', or '-Y/--yearly'.  More
complex intervals may be specified with a period expression.  Report
intervals can not be specified with a query, currently.


File: hledger.info,  Node: Period expressions,  Next: Depth limiting,  Prev: Report intervals,  Up: OPTIONS

2.10 Period expressions
=======================

The '-p/--period' option accepts period expressions, a shorthand way of
expressing a start date, end date, and/or report interval all at once.

   Here's a basic period expression specifying the first quarter of
2009.  Note, hledger always treats start dates as inclusive and end
dates as exclusive:

   '-p "from 2009/1/1 to 2009/4/1"'

   Keywords like "from" and "to" are optional, and so are the spaces, as
long as you don't run two dates together.  "to" can also be written as
"-".  These are equivalent to the above:

'-p "2009/1/1 2009/4/1"'
'-p2009/1/1to2009/4/1'
'-p2009/1/1-2009/4/1'

   Dates are smart dates, so if the current year is 2009, the above can
also be written as:

'-p "1/1 4/1"'
'-p "january-apr"'
'-p "this year to 4/1"'

   If you specify only one date, the missing start or end date will be
the earliest or latest transaction in your journal:

'-p "from 2009/1/1"'   everything after january 1, 2009
'-p "from 2009/1"'     the same
'-p "from 2009"'       the same
'-p "to 2009"'         everything before january 1, 2009

   A single date with no "from" or "to" defines both the start and end
date like so:

'-p "2009"'       the year 2009; equivalent to "2009/1/1 to 2010/1/1"
'-p "2009/1"'     the month of jan; equivalent to "2009/1/1 to 2009/2/1"
'-p "2009/1/1"'   just that day; equivalent to "2009/1/1 to 2009/1/2"

   The argument of '-p' can also begin with, or be, a report interval
expression.  The basic report intervals are 'daily', 'weekly',
'monthly', 'quarterly', or 'yearly', which have the same effect as the
'-D','-W','-M','-Q', or '-Y' flags.  Between report interval and
start/end dates (if any), the word 'in' is optional.  Examples:

'-p "weekly from 2009/1/1 to 2009/4/1"'
'-p "monthly in 2008"'
'-p "quarterly"'

   Note that 'weekly', 'monthly', 'quarterly' and 'yearly' intervals
will always start on the first day on week, month, quarter or year
accordingly, and will end on the last day of same period, even if
associated period expression specifies different explicit start and end
date.

   For example:

'-p "weekly from 2009/1/1 to 2009/4/1"' - starts on 2008/12/29, closest preceeding Monday
'-p "monthly in 2008/11/25"' - starts on 2018/11/01
'-p "quarterly from 2009-05-05 to 2009-06-01"' - starts on 2009/04/01, ends on 2009/06/30, which are first and last days of Q2 2009
'-p "yearly from 2009-12-29"' - starts on 2009/01/01, first day of 2009

   The following more complex report intervals are also supported:
'biweekly', 'bimonthly', 'every day|week|month|quarter|year', 'every N
days|weeks|months|quarters|years'.

   All of these will start on the first day of the requested period and
end on the last one, as described above.

   Examples:

'-p "bimonthly from 2008"' - periods will have boundaries on 2008/01/01, 2008/03/01, ...
'-p "every 2 weeks"' - starts on closest preceeding Monday
'-p "every 5 month from 2009/03"' - periods will have boundaries on 2009/03/01, 2009/08/01, ...

   If you want intervals that start on arbitrary day of your choosing
and span a week, month or year, you need to use any of the following:

   'every Nth day of week', 'every <weekday>', 'every Nth day [of
month]', 'every Nth weekday [of month]', 'every MM/DD [of year]', 'every
Nth MMM [of year]', 'every MMM Nth [of year]'.

   Examples:

'-p "every 2nd day of week"' - periods will go from Tue to Tue
'-p "every Tue"' - same
'-p "every 15th day"' - period boundaries will be on 15th of each month
'-p "every 2nd Monday"' - period boundaries will be on second Monday of each month
'-p "every 11/05"' - yearly periods with boundaries on 5th of Nov
'-p "every 5th Nov"' - same
'-p "every Nov 5th"' - same

   Show historical balances at end of 15th each month (N is exclusive
end date):

   'hledger balance -H -p "every 16th day"'

   Group postings from start of wednesday to end of next tuesday (N is
start date and exclusive end date):

   'hledger register checking -p "every 3rd day of week"'


File: hledger.info,  Node: Depth limiting,  Next: Pivoting,  Prev: Period expressions,  Up: OPTIONS

2.11 Depth limiting
===================

With the '--depth N' option (short form: '-N'), commands like account,
balance and register will show only the uppermost accounts in the
account tree, down to level N. Use this when you want a summary with
less detail.  This flag has the same effect as a 'depth:' query argument
(so '-2', '--depth=2' or 'depth:2' are basically equivalent).


File: hledger.info,  Node: Pivoting,  Next: Cost,  Prev: Depth limiting,  Up: OPTIONS

2.12 Pivoting
=============

Normally hledger sums amounts, and organizes them in a hierarchy, based
on account name.  The '--pivot FIELD' option causes it to sum and
organize hierarchy based on the value of some other field instead.
FIELD can be: 'code', 'description', 'payee', 'note', or the full name
(case insensitive) of any tag.  As with account names, values containing
'colon:separated:parts' will be displayed hierarchically in reports.

   '--pivot' is a general option affecting all reports; you can think of
hledger transforming the journal before any other processing, replacing
every posting's account name with the value of the specified field on
that posting, inheriting it from the transaction or using a blank value
if it's not present.

   An example:

2016/02/16 Member Fee Payment
    assets:bank account                    2 EUR
    income:member fees                    -2 EUR  ; member: John Doe

   Normal balance report showing account names:

$ hledger balance
               2 EUR  assets:bank account
              -2 EUR  income:member fees
--------------------
                   0

   Pivoted balance report, using member: tag values instead:

$ hledger balance --pivot member
               2 EUR
              -2 EUR  John Doe
--------------------
                   0

   One way to show only amounts with a member: value (using a query,
described below):

$ hledger balance --pivot member tag:member=.
              -2 EUR  John Doe
--------------------
              -2 EUR

   Another way (the acct: query matches against the pivoted "account
name"):

$ hledger balance --pivot member acct:.
              -2 EUR  John Doe
--------------------
              -2 EUR


File: hledger.info,  Node: Cost,  Next: Market value,  Prev: Pivoting,  Up: OPTIONS

2.13 Cost
=========

The '-B/--cost' flag converts amounts to their cost at transaction time,
if they have a transaction price specified.


File: hledger.info,  Node: Market value,  Next: Combining -B and -V,  Prev: Cost,  Up: OPTIONS

2.14 Market value
=================

The '-V/--value' flag converts reported amounts to their current market
value.  Specifically, when there is a market price (P directive) for the
amount's commodity, dated on or before today's date (or the report end
date if specified), the amount will be converted to the price's
commodity.

   When there are multiple applicable P directives, -V chooses the most
recent one, or in case of equal dates, the last-parsed one.

   For example:

# one euro is worth this many dollars from nov 1
P 2016/11/01 € $1.10

# purchase some euros on nov 3
2016/11/3
    assets:euros        €100
    assets:checking

# the euro is worth fewer dollars by dec 21
P 2016/12/21 € $1.03

   How many euros do I have ?

$ hledger -f t.j bal -N euros
                €100  assets:euros

   What are they worth at end of nov 3 ?

$ hledger -f t.j bal -N euros -V -e 2016/11/4
             $110.00  assets:euros

   What are they worth after 2016/12/21 ?  (no report end date
specified, defaults to today)

$ hledger -f t.j bal -N euros -V
             $103.00  assets:euros

   Currently, hledger's -V only uses market prices recorded with P
directives, not transaction prices (unlike Ledger).

   Currently, -V has a limitation in multicolumn balance reports: it
uses the market prices on the report end date for all columns.  (Instead
of the prices on each column's end date.)


File: hledger.info,  Node: Combining -B and -V,  Next: Output destination,  Prev: Market value,  Up: OPTIONS

2.15 Combining -B and -V
========================

Using -B/-cost and -V/-value together is currently allowed, but the
results are probably not meaningful.  Let us know if you find a use for
this.


File: hledger.info,  Node: Output destination,  Next: Output format,  Prev: Combining -B and -V,  Up: OPTIONS

2.16 Output destination
=======================

Some commands (print, register, stats, the balance commands) can write
their output to a destination other than the console.  This is
controlled by the '-o/--output-file' option.

$ hledger balance -o -     # write to stdout (the default)
$ hledger balance -o FILE  # write to FILE


File: hledger.info,  Node: Output format,  Next: Regular expressions,  Prev: Output destination,  Up: OPTIONS

2.17 Output format
==================

Some commands can write their output in other formats.  Eg print and
register can output CSV, and the balance commands can output CSV or
HTML. This is controlled by the '-O/--output-format' option, or by
specifying a '.csv' or '.html' file extension with '-o/--output-file'.

$ hledger balance -O csv       # write CSV to stdout
$ hledger balance -o FILE.csv  # write CSV to FILE.csv


File: hledger.info,  Node: Regular expressions,  Prev: Output format,  Up: OPTIONS

2.18 Regular expressions
========================

hledger uses regular expressions in a number of places:

   * query terms, on the command line and in the hledger-web search
     form: 'REGEX', 'desc:REGEX', 'cur:REGEX', 'tag:...=REGEX'
   * CSV rules conditional blocks: 'if REGEX ...'
   * account alias directives and options: 'alias /REGEX/ =
     REPLACEMENT', '--alias /REGEX/=REPLACEMENT'

   hledger's regular expressions come from the regex-tdfa library.  In
general they:

   * are case insensitive
   * are infix matching (do not need to match the entire thing being
     matched)
   * are POSIX extended regular expressions
   * also support GNU word boundaries (\<, \>, \b, \B)
   * and parenthesised capturing groups and numeric backreferences in
     replacement strings
   * do not support mode modifiers like (?s)

   Some things to note:

   * In the 'alias' directive and '--alias' option, regular expressions
     must be enclosed in forward slashes ('/REGEX/').  Elsewhere in
     hledger, these are not required.

   * In queries, to match a regular expression metacharacter like '$' as
     a literal character, prepend a backslash.  Eg to search for amounts
     with the dollar sign in hledger-web, write 'cur:\$'.

   * On the command line, some metacharacters like '$' have a special
     meaning to the shell and so must be escaped at least once more.
     See Special characters.


File: hledger.info,  Node: QUERIES,  Next: COMMANDS,  Prev: OPTIONS,  Up: Top

3 QUERIES
*********

One of hledger's strengths is being able to quickly report on precise
subsets of your data.  Most commands accept an optional query
expression, written as arguments after the command name, to filter the
data by date, account name or other criteria.  The syntax is similar to
a web search: one or more space-separated search terms, quotes to
enclose whitespace, prefixes to match specific fields, a not: prefix to
negate the match.

   We do not yet support arbitrary boolean combinations of search terms;
instead most commands show transactions/postings/accounts which match
(or negatively match):

   * any of the description terms AND
   * any of the account terms AND
   * any of the status terms AND
   * all the other terms.

   The print command instead shows transactions which:

   * match any of the description terms AND
   * have any postings matching any of the positive account terms AND
   * have no postings matching any of the negative account terms AND
   * match all the other terms.

   The following kinds of search terms can be used.  Remember these can
also be prefixed with *'not:'*, eg to exclude a particular subaccount.

*'REGEX', 'acct:REGEX'*

     match account names by this regular expression.  (With no prefix,
     'acct:' is assumed.)  same as above

*'amt:N, amt:<N, amt:<=N, amt:>N, amt:>=N'*

     match postings with a single-commodity amount that is equal to,
     less than, or greater than N. (Multi-commodity amounts are not
     tested, and will always match.)  The comparison has two modes: if N
     is preceded by a + or - sign (or is 0), the two signed numbers are
     compared.  Otherwise, the absolute magnitudes are compared,
     ignoring sign.
*'code:REGEX'*

     match by transaction code (eg check number)
*'cur:REGEX'*

     match postings or transactions including any amounts whose
     currency/commodity symbol is fully matched by REGEX. (For a partial
     match, use '.*REGEX.*').  Note, to match characters which are
     regex-significant, like the dollar sign ('$'), you need to prepend
     '\'.  And when using the command line you need to add one more
     level of quoting to hide it from the shell, so eg do: 'hledger
     print cur:'\$'' or 'hledger print cur:\\$'.
*'desc:REGEX'*

     match transaction descriptions.
*'date:PERIODEXPR'*

     match dates within the specified period.  PERIODEXPR is a period
     expression (with no report interval).  Examples: 'date:2016',
     'date:thismonth', 'date:2000/2/1-2/15', 'date:lastweek-'.  If the
     '--date2' command line flag is present, this matches secondary
     dates instead.
*'date2:PERIODEXPR'*

     match secondary dates within the specified period.
*'depth:N'*

     match (or display, depending on command) accounts at or above this
     depth
*'note:REGEX'*

     match transaction notes (part of description right of '|', or whole
     description when there's no '|')
*'payee:REGEX'*

     match transaction payee/payer names (part of description left of
     '|', or whole description when there's no '|')
*'real:, real:0'*

     match real or virtual postings respectively
*'status:, status:!, status:*'*

     match unmarked, pending, or cleared transactions respectively
*'tag:REGEX[=REGEX]'*

     match by tag name, and optionally also by tag value.  Note a tag:
     query is considered to match a transaction if it matches any of the
     postings.  Also remember that postings inherit the tags of their
     parent transaction.

   The following special search term is used automatically in
hledger-web, only:

*'inacct:ACCTNAME'*

     tells hledger-web to show the transaction register for this
     account.  Can be filtered further with 'acct' etc.

   Some of these can also be expressed as command-line options (eg
'depth:2' is equivalent to '--depth 2').  Generally you can mix options
and query arguments, and the resulting query will be their intersection
(perhaps excluding the '-p/--period' option).


File: hledger.info,  Node: COMMANDS,  Next: ADD-ON COMMANDS,  Prev: QUERIES,  Up: Top

4 COMMANDS
**********

hledger provides a number of subcommands; 'hledger' with no arguments
shows a list.

   If you install additional 'hledger-*' packages, or if you put
programs or scripts named 'hledger-NAME' in your PATH, these will also
be listed as subcommands.

   Run a subcommand by writing its name as first argument (eg 'hledger
incomestatement').  You can also write one of the standard short aliases
displayed in parentheses in the command list ('hledger b'), or any any
unambiguous prefix of a command name ('hledger inc').

   Here are all the builtin commands in alphabetical order.  See also
'hledger' for a more organised command list, and 'hledger CMD -h' for
detailed command help.
* Menu:

* accounts::
* activity::
* add::
* balance::
* balancesheet::
* balancesheetequity::
* cashflow::
* check-dates::
* check-dupes::
* close::
* help::
* import::
* incomestatement::
* prices::
* print::
* print-unique::
* register::
* register-match::
* rewrite::
* stats::
* tags::
* test::


File: hledger.info,  Node: accounts,  Next: activity,  Up: COMMANDS

4.1 accounts
============

Show account names.  Alias: a.

'--declared'

     show account names declared with account directives
'--used'

     show account names posted to by transactions
'--tree'

     show short account names and their parents, as a tree
'--flat'

     show full account names, as a list (default)
'--drop=N'

     in flat mode: omit N leading account name parts

   This command lists account names, either declared with account
directives (-declared), posted to (-used), or both (default).  With
query arguments, only matched account names and account names referenced
by matched postings are shown.  It shows a flat list by default.  With
'--tree', it uses indentation to show the account hierarchy.  In flat
mode you can add '--drop N' to omit the first few account name
components.  Account names can be depth-clipped with '--depth N' or
depth:N.

   Examples:

$ hledger accounts --tree
assets
  bank
    checking
    saving
  cash
expenses
  food
  supplies
income
  gifts
  salary
liabilities
  debts

$ hledger accounts --drop 1
bank:checking
bank:saving
cash
food
supplies
gifts
salary
debts

$ hledger accounts
assets:bank:checking
assets:bank:saving
assets:cash
expenses:food
expenses:supplies
income:gifts
income:salary
liabilities:debts


File: hledger.info,  Node: activity,  Next: add,  Prev: accounts,  Up: COMMANDS

4.2 activity
============

Show an ascii barchart of posting counts per interval.

   The activity command displays an ascii histogram showing transaction
counts by day, week, month or other reporting interval (by day is the
default).  With query arguments, it counts only matched transactions.

$ hledger activity --quarterly
2008-01-01 **
2008-04-01 *******
2008-07-01 
2008-10-01 **


File: hledger.info,  Node: add,  Next: balance,  Prev: activity,  Up: COMMANDS

4.3 add
=======

Prompt for transactions and add them to the journal.

'--no-new-accounts'

     don't allow creating new accounts; helps prevent typos when
     entering account names

   Many hledger users edit their journals directly with a text editor,
or generate them from CSV. For more interactive data entry, there is the
'add' command, which prompts interactively on the console for new
transactions, and appends them to the journal file (if there are
multiple '-f FILE' options, the first file is used.)  Existing
transactions are not changed.  This is the only hledger command that
writes to the journal file.

   To use it, just run 'hledger add' and follow the prompts.  You can
add as many transactions as you like; when you are finished, enter '.'
or press control-d or control-c to exit.

   Features:

   * add tries to provide useful defaults, using the most similar recent
     transaction (by description) as a template.
   * You can also set the initial defaults with command line arguments.
   * Readline-style edit keys can be used during data entry.
   * The tab key will auto-complete whenever possible - accounts,
     descriptions, dates ('yesterday', 'today', 'tomorrow').  If the
     input area is empty, it will insert the default value.
   * If the journal defines a default commodity, it will be added to any
     bare numbers entered.
   * A parenthesised transaction code may be entered following a date.
   * Comments and tags may be entered following a description or amount.
   * If you make a mistake, enter '<' at any prompt to restart the
     transaction.
   * Input prompts are displayed in a different colour when the terminal
     supports it.

   Example (see the tutorial for a detailed explanation):

$ hledger add
Adding transactions to journal file /src/hledger/examples/sample.journal
Any command line arguments will be used as defaults.
Use tab key to complete, readline keys to edit, enter to accept defaults.
An optional (CODE) may follow transaction dates.
An optional ; COMMENT may follow descriptions or amounts.
If you make a mistake, enter < at any prompt to restart the transaction.
To end a transaction, enter . when prompted.
To quit, enter . at a date prompt or press control-d or control-c.
Date [2015/05/22]: 
Description: supermarket
Account 1: expenses:food
Amount  1: $10
Account 2: assets:checking
Amount  2 [$-10.0]: 
Account 3 (or . or enter to finish this transaction): .
2015/05/22 supermarket
    expenses:food             $10
    assets:checking        $-10.0

Save this transaction to the journal ? [y]: 
Saved.
Starting the next transaction (. or ctrl-D/ctrl-C to quit)
Date [2015/05/22]: <CTRL-D> $


File: hledger.info,  Node: balance,  Next: balancesheet,  Prev: add,  Up: COMMANDS

4.4 balance
===========

Show accounts and their balances.  Aliases: b, bal.

'--change'

     show balance change in each period (default)
'--cumulative'

     show balance change accumulated across periods (in multicolumn
     reports)
'-H --historical'

     show historical ending balance in each period (includes postings
     before report start date)
'--tree'

     show accounts as a tree; amounts include subaccounts (default in
     simple reports)
'--flat'

     show accounts as a list; amounts exclude subaccounts except when
     account is depth-clipped (default in multicolumn reports)
'-A --average'

     show a row average column (in multicolumn mode)
'-T --row-total'

     show a row total column (in multicolumn mode)
'-N --no-total'

     don't show the final total row
'--drop=N'

     omit N leading account name parts (in flat mode)
'--no-elide'

     don't squash boring parent accounts (in tree mode)
'--format=LINEFORMAT'

     in single-column balance reports: use this custom line format
'-O FMT --output-format=FMT'

     select the output format.  Supported formats: txt, csv, html.
'-o FILE --output-file=FILE'

     write output to FILE. A file extension matching one of the above
     formats selects that format.
'--pretty-tables'

     use unicode to display prettier tables.
'--sort-amount'

     sort by amount instead of account code/name (in flat mode).  With
     multiple columns, sorts by the row total, or by row average if that
     is displayed.
'--invert'

     display all amounts with reversed sign
'--budget'

     show performance compared to budget goals defined by periodic
     transactions
'--show-unbudgeted'

     with -budget, show unbudgeted accounts also

   The balance command is hledger's most versatile command.  Note,
despite the name, it is not always used for showing real-world account
balances; the more accounting-aware balancesheet and incomestatement may
be more convenient for that.

   By default, it displays all accounts, and each account's change in
balance during the entire period of the journal.  Balance changes are
calculated by adding up the postings in each account.  You can limit the
postings matched, by a query, to see fewer accounts, changes over a
different time period, changes from only cleared transactions, etc.

   If you include an account's complete history of postings in the
report, the balance change is equivalent to the account's current ending
balance.  For a real-world account, typically you won't have all
transactions in the journal; instead you'll have all transactions after
a certain date, and an "opening balances" transaction setting the
correct starting balance on that date.  Then the balance command will
show real-world account balances.  In some cases the -H/-historical flag
is used to ensure this (more below).

   The balance command can produce several styles of report:
* Menu:

* Classic balance report::
* Customising the classic balance report::
* Colour support::
* Flat mode::
* Depth limited balance reports::
* Multicolumn balance report::
* Budget report::
* Output format::


File: hledger.info,  Node: Classic balance report,  Next: Customising the classic balance report,  Up: balance

4.4.1 Classic balance report
----------------------------

This is the original balance report, as found in Ledger.  It usually
looks like this:

$ hledger balance
                 $-1  assets
                  $1    bank:saving
                 $-2    cash
                  $2  expenses
                  $1    food
                  $1    supplies
                 $-2  income
                 $-1    gifts
                 $-1    salary
                  $1  liabilities:debts
--------------------
                   0

   By default, accounts are displayed hierarchically, with subaccounts
indented below their parent.  At each level of the tree, accounts are
sorted by account code if any, then by account name.  Or with
'-S/--sort-amount', by their balance amount.

   "Boring" accounts, which contain a single interesting subaccount and
no balance of their own, are elided into the following line for more
compact output.  Use '--no-elide' to prevent this.

   Account balances are "inclusive" - they include the balances of any
subaccounts.

   Accounts which have zero balance (and no non-zero subaccounts) are
omitted.  Use '-E/--empty' to show them.

   A final total is displayed by default; use '-N/--no-total' to
suppress it, eg:

$ hledger balance -p 2008/6 expenses --no-total
                  $2  expenses
                  $1    food
                  $1    supplies


File: hledger.info,  Node: Customising the classic balance report,  Next: Colour support,  Prev: Classic balance report,  Up: balance

4.4.2 Customising the classic balance report
--------------------------------------------

You can customise the layout of classic balance reports with '--format
FMT':

$ hledger balance --format "%20(account) %12(total)"
              assets          $-1
         bank:saving           $1
                cash          $-2
            expenses           $2
                food           $1
            supplies           $1
              income          $-2
               gifts          $-1
              salary          $-1
   liabilities:debts           $1
---------------------------------
                                0

   The FMT format string (plus a newline) specifies the formatting
applied to each account/balance pair.  It may contain any suitable text,
with data fields interpolated like so:

   '%[MIN][.MAX](FIELDNAME)'

   * MIN pads with spaces to at least this width (optional)
   * MAX truncates at this width (optional)
   * FIELDNAME must be enclosed in parentheses, and can be one of:

        * 'depth_spacer' - a number of spaces equal to the account's
          depth, or if MIN is specified, MIN * depth spaces.
        * 'account' - the account's name
        * 'total' - the account's balance/posted total, right justified

   Also, FMT can begin with an optional prefix to control how
multi-commodity amounts are rendered:

   * '%_' - render on multiple lines, bottom-aligned (the default)
   * '%^' - render on multiple lines, top-aligned
   * '%,' - render on one line, comma-separated

   There are some quirks.  Eg in one-line mode, '%(depth_spacer)' has no
effect, instead '%(account)' has indentation built in.  Experimentation
may be needed to get pleasing results.

   Some example formats:

   * '%(total)' - the account's total
   * '%-20.20(account)' - the account's name, left justified, padded to
     20 characters and clipped at 20 characters
   * '%,%-50(account) %25(total)' - account name padded to 50
     characters, total padded to 20 characters, with multiple
     commodities rendered on one line
   * '%20(total) %2(depth_spacer)%-(account)' - the default format for
     the single-column balance report


File: hledger.info,  Node: Colour support,  Next: Flat mode,  Prev: Customising the classic balance report,  Up: balance

4.4.3 Colour support
--------------------

The balance command shows negative amounts in red, if:

   * the 'TERM' environment variable is not set to 'dumb'
   * the output is not being redirected or piped anywhere


File: hledger.info,  Node: Flat mode,  Next: Depth limited balance reports,  Prev: Colour support,  Up: balance

4.4.4 Flat mode
---------------

To see a flat list instead of the default hierarchical display, use
'--flat'.  In this mode, accounts (unless depth-clipped) show their full
names and "exclusive" balance, excluding any subaccount balances.  In
this mode, you can also use '--drop N' to omit the first few account
name components.

$ hledger balance -p 2008/6 expenses -N --flat --drop 1
                  $1  food
                  $1  supplies


File: hledger.info,  Node: Depth limited balance reports,  Next: Multicolumn balance report,  Prev: Flat mode,  Up: balance

4.4.5 Depth limited balance reports
-----------------------------------

With '--depth N' or 'depth:N' or just '-N', balance reports show
accounts only to the specified numeric depth.  This is very useful to
summarise a complex set of accounts and get an overview.

$ hledger balance -N -1
                 $-1  assets
                  $2  expenses
                 $-2  income
                  $1  liabilities

   Flat-mode balance reports, which normally show exclusive balances,
show inclusive balances at the depth limit.


File: hledger.info,  Node: Multicolumn balance report,  Next: Budget report,  Prev: Depth limited balance reports,  Up: balance

4.4.6 Multicolumn balance report
--------------------------------

Multicolumn or tabular balance reports are a very useful hledger
feature, and usually the preferred style.  They share many of the above
features, but they show the report as a table, with columns representing
time periods.  This mode is activated by providing a reporting interval.

   There are three types of multicolumn balance report, showing
different information:

  1. By default: each column shows the sum of postings in that period,
     ie the account's change of balance in that period.  This is useful
     eg for a monthly income statement:

     $ hledger balance --quarterly income expenses -E
     Balance changes in 2008:
     
                        ||  2008q1  2008q2  2008q3  2008q4 
     ===================++=================================
      expenses:food     ||       0      $1       0       0 
      expenses:supplies ||       0      $1       0       0 
      income:gifts      ||       0     $-1       0       0 
      income:salary     ||     $-1       0       0       0 
     -------------------++---------------------------------
                        ||     $-1      $1       0       0 

  2. With '--cumulative': each column shows the ending balance for that
     period, accumulating the changes across periods, starting from 0 at
     the report start date:

     $ hledger balance --quarterly income expenses -E --cumulative
     Ending balances (cumulative) in 2008:
     
                        ||  2008/03/31  2008/06/30  2008/09/30  2008/12/31 
     ===================++=================================================
      expenses:food     ||           0          $1          $1          $1 
      expenses:supplies ||           0          $1          $1          $1 
      income:gifts      ||           0         $-1         $-1         $-1 
      income:salary     ||         $-1         $-1         $-1         $-1 
     -------------------++-------------------------------------------------
                        ||         $-1           0           0           0 

  3. With '--historical/-H': each column shows the actual historical
     ending balance for that period, accumulating the changes across
     periods, starting from the actual balance at the report start date.
     This is useful eg for a multi-period balance sheet, and when you
     are showing only the data after a certain start date:

     $ hledger balance ^assets ^liabilities --quarterly --historical --begin 2008/4/1
     Ending balances (historical) in 2008/04/01-2008/12/31:
     
                           ||  2008/06/30  2008/09/30  2008/12/31 
     ======================++=====================================
      assets:bank:checking ||          $1          $1           0 
      assets:bank:saving   ||          $1          $1          $1 
      assets:cash          ||         $-2         $-2         $-2 
      liabilities:debts    ||           0           0          $1 
     ----------------------++-------------------------------------
                           ||           0           0           0 

   Multicolumn balance reports display accounts in flat mode by default;
to see the hierarchy, use '--tree'.

   With a reporting interval (like '--quarterly' above), the report
start/end dates will be adjusted if necessary so that they encompass the
displayed report periods.  This is so that the first and last periods
will be "full" and comparable to the others.

   The '-E/--empty' flag does two things in multicolumn balance reports:
first, the report will show all columns within the specified report
period (without -E, leading and trailing columns with all zeroes are not
shown).  Second, all accounts which existed at the report start date
will be considered, not just the ones with activity during the report
period (use -E to include low-activity accounts which would otherwise
would be omitted).

   The '-T/--row-total' flag adds an additional column showing the total
for each row.

   The '-A/--average' flag adds a column showing the average value in
each row.

   Here's an example of all three:

$ hledger balance -Q income expenses --tree -ETA
Balance changes in 2008:

            ||  2008q1  2008q2  2008q3  2008q4    Total  Average 
============++===================================================
 expenses   ||       0      $2       0       0       $2       $1 
   food     ||       0      $1       0       0       $1        0 
   supplies ||       0      $1       0       0       $1        0 
 income     ||     $-1     $-1       0       0      $-2      $-1 
   gifts    ||       0     $-1       0       0      $-1        0 
   salary   ||     $-1       0       0       0      $-1        0 
------------++---------------------------------------------------
            ||     $-1      $1       0       0        0        0 

# Average is rounded to the dollar here since all journal amounts are

   Limitations:

   In multicolumn reports the '-V/--value' flag uses the market price on
the report end date, for all columns (not the price on each column's end
date).

   Eliding of boring parent accounts in tree mode, as in the classic
balance report, is not yet supported in multicolumn reports.


File: hledger.info,  Node: Budget report,  Next: ,  Prev: Multicolumn balance report,  Up: balance

4.4.7 Budget report
-------------------

With '--budget', extra columns are displayed showing budget goals for
each account and period, if any.  Budget goals are defined by periodic
transactions.  This is very useful for comparing planned and actual
income, expenses, time usage, etc.  -budget is most often combined with
a report interval.

   For example, you can take average monthly expenses in the common
expense categories to construct a minimal monthly budget:

;; Budget
~ monthly
  income  $2000
  expenses:food    $400
  expenses:bus     $50
  expenses:movies  $30
  assets:bank:checking

;; Two months worth of expenses
2017-11-01
  income  $1950
  expenses:food    $396
  expenses:bus     $49
  expenses:movies  $30
  expenses:supplies  $20
  assets:bank:checking

2017-12-01
  income  $2100
  expenses:food    $412
  expenses:bus     $53
  expenses:gifts   $100
  assets:bank:checking

   You can now see a monthly budget report:

$ hledger balance -M --budget
Budget performance in 2017/11/01-2017/12/31:

                      ||                2017/11                  2017/12 
======================++=================================================
 <unbudgeted>         ||                    $20                     $100 
 assets:bank:checking || $-2445 [99% of $-2480]  $-2665 [107% of $-2480] 
 expenses:bus         ||       $49 [98% of $50]        $53 [106% of $50] 
 expenses:food        ||     $396 [99% of $400]      $412 [103% of $400] 
 expenses:movies      ||      $30 [100% of $30]            0 [0% of $30] 
 income               ||   $1950 [98% of $2000]    $2100 [105% of $2000] 
----------------------++-------------------------------------------------
                      ||                      0                        0 

   By default, only accounts with budget goals during the report period
are shown.  '--show-unbudgeted' shows unbudgeted accounts as well.
Top-level accounts with no budget goals anywhere below them are grouped
under '<unbudgeted>'.

   You can roll over unspent budgets to next period with '--cumulative':

$ hledger balance -M --budget --cumulative
Budget performance in 2017/11/01-2017/12/31:

                      ||             2017/11/30               2017/12/31 
======================++=================================================
 <unbudgeted>         ||                    $20                     $120 
 assets:bank:checking || $-2445 [99% of $-2480]  $-5110 [103% of $-4960] 
 expenses:bus         ||       $49 [98% of $50]      $102 [102% of $100] 
 expenses:food        ||     $396 [99% of $400]      $808 [101% of $800] 
 expenses:movies      ||      $30 [100% of $30]         $30 [50% of $60] 
 income               ||   $1950 [98% of $2000]    $4050 [101% of $4000] 
----------------------++-------------------------------------------------
                      ||                      0                        0

   Note, the '-S/--sort-amount' flag is not yet fully supported with
'--budget'.

   For more examples, see Budgeting and Forecasting.

4.4.8 Output format
-------------------

The balance command supports output destination and output format
selection.


File: hledger.info,  Node: balancesheet,  Next: balancesheetequity,  Prev: balance,  Up: COMMANDS

4.5 balancesheet
================

This command displays a simple balance sheet, showing historical ending
balances of asset and liability accounts (ignoring any report begin
date).  It assumes that these accounts are under a top-level 'asset' or
'liability' account (case insensitive, plural forms also allowed).  Note
this report shows all account balances with normal positive sign (like
conventional financial statements, unlike balance/print/register)
(experimental).  (bs)

'--change'

     show balance change in each period, instead of historical ending
     balances
'--cumulative'

     show balance change accumulated across periods (in multicolumn
     reports), instead of historical ending balances
'-H --historical'

     show historical ending balance in each period (includes postings
     before report start date) (default)
'--tree'

     show accounts as a tree; amounts include subaccounts (default in
     simple reports)
'--flat'

     show accounts as a list; amounts exclude subaccounts except when
     account is depth-clipped (default in multicolumn reports)
'-A --average'

     show a row average column (in multicolumn mode)
'-T --row-total'

     show a row total column (in multicolumn mode)
'-N --no-total'

     don't show the final total row
'--drop=N'

     omit N leading account name parts (in flat mode)
'--no-elide'

     don't squash boring parent accounts (in tree mode)
'--format=LINEFORMAT'

     in single-column balance reports: use this custom line format
'--sort-amount'

     sort by amount instead of account code/name

   Example:

$ hledger balancesheet
Balance Sheet

Assets:
                 $-1  assets
                  $1    bank:saving
                 $-2    cash
--------------------
                 $-1

Liabilities:
                  $1  liabilities:debts
--------------------
                  $1

Total:
--------------------
                   0

   With a reporting interval, multiple columns will be shown, one for
each report period.  As with multicolumn balance reports, you can alter
the report mode with '--change'/'--cumulative'/'--historical'.  Normally
balancesheet shows historical ending balances, which is what you need
for a balance sheet; note this means it ignores report begin dates.

   This command also supports output destination and output format
selection.


File: hledger.info,  Node: balancesheetequity,  Next: cashflow,  Prev: balancesheet,  Up: COMMANDS

4.6 balancesheetequity
======================

Just like balancesheet, but also reports Equity (which it assumes is
under a top-level 'equity' account).

   Example:

$ hledger balancesheetequity
Balance Sheet With Equity

Assets:
                 $-2  assets
                  $1    bank:saving
                 $-3    cash
--------------------
                 $-2

Liabilities:
                  $1  liabilities:debts
--------------------
                  $1

Equity:
          $1  equity:owner
--------------------
          $1

Total:
--------------------
                   0


File: hledger.info,  Node: cashflow,  Next: check-dates,  Prev: balancesheetequity,  Up: COMMANDS

4.7 cashflow
============

This command displays a simple cashflow statement, showing changes in
"cash" accounts.  It assumes that these accounts are under a top-level
'asset' account (case insensitive, plural forms also allowed) and do not
contain 'receivable' or 'A/R' in their name.  Note this report shows all
account balances with normal positive sign (like conventional financial
statements, unlike balance/print/register) (experimental).  (cf)

'--change'

     show balance change in each period (default)
'--cumulative'

     show balance change accumulated across periods (in multicolumn
     reports), instead of changes during periods
'-H --historical'

     show historical ending balance in each period (includes postings
     before report start date), instead of changes during each period
'--tree'

     show accounts as a tree; amounts include subaccounts (default in
     simple reports)
'--flat'

     show accounts as a list; amounts exclude subaccounts except when
     account is depth-clipped (default in multicolumn reports)
'-A --average'

     show a row average column (in multicolumn mode)
'-T --row-total'

     show a row total column (in multicolumn mode)
'-N --no-total'

     don't show the final total row (in simple reports)
'--drop=N'

     omit N leading account name parts (in flat mode)
'--no-elide'

     don't squash boring parent accounts (in tree mode)
'--format=LINEFORMAT'

     in single-column balance reports: use this custom line format
'--sort-amount'

     sort by amount instead of account code/name

   Example:

$ hledger cashflow
Cashflow Statement

Cash flows:
                 $-1  assets
                  $1    bank:saving
                 $-2    cash
--------------------
                 $-1

Total:
--------------------
                 $-1

   With a reporting interval, multiple columns will be shown, one for
each report period.  Normally cashflow shows changes in assets per
period, though as with multicolumn balance reports you can alter the
report mode with '--change'/'--cumulative'/'--historical'.

   This command also supports output destination and output format
selection.


File: hledger.info,  Node: check-dates,  Next: check-dupes,  Prev: cashflow,  Up: COMMANDS

4.8 check-dates
===============

Check that transactions are sorted by increasing date.  With a query,
only matched transactions' dates are checked.


File: hledger.info,  Node: check-dupes,  Next: close,  Prev: check-dates,  Up: COMMANDS

4.9 check-dupes
===============

Report account names having the same leaf but different prefixes.  An
example: http://stefanorodighiero.net/software/hledger-dupes.html


File: hledger.info,  Node: close,  Next: help,  Prev: check-dupes,  Up: COMMANDS

4.10 close
==========

Print closing/opening transactions that bring some or all account
balances to zero and back.  Can be useful for bringing asset/liability
balances across file boundaries, or for closing out income/expenses for
a period.  This was formerly called "equity", as in Ledger, and that
alias is also accepted.  See close -help for more.


File: hledger.info,  Node: help,  Next: import,  Prev: close,  Up: COMMANDS

4.11 help
=========

Show any of the hledger manuals.

   The 'help' command displays any of the main hledger manuals, in one
of several ways.  Run it with no argument to list the manuals, or
provide a full or partial manual name to select one.

   hledger manuals are available in several formats.  hledger help will
use the first of these display methods that it finds: info, man, $PAGER,
less, stdout (or when non-interactive, just stdout).  You can force a
particular viewer with the '--info', '--man', '--pager', '--cat' flags.

$ hledger help
Please choose a manual by typing "hledger help MANUAL" (a substring is ok).
Manuals: hledger hledger-ui hledger-web hledger-api journal csv timeclock timedot

$ hledger help h --man

hledger(1)                    hledger User Manuals                    hledger(1)

NAME
       hledger - a command-line accounting tool

SYNOPSIS
       hledger [-f FILE] COMMAND [OPTIONS] [ARGS]
       hledger [-f FILE] ADDONCMD -- [OPTIONS] [ARGS]
       hledger

DESCRIPTION
       hledger  is  a  cross-platform  program  for tracking money, time, or any
...


File: hledger.info,  Node: import,  Next: incomestatement,  Prev: help,  Up: COMMANDS

4.12 import
===========

Read new transactions added to each FILE since last run, and add them to
the main journal file.

'--dry-run'

     just show the transactions to be imported

   The input files are specified as arguments - no need to write -f
before each one.  So eg to add new transactions from all CSV files to
the main journal, it's just: 'hledger import *.csv'

   New transactions are detected in the same way as print -new: by
assuming transactions are always added to the input files in increasing
date order, and by saving '.latest.FILE' state files.

   The -dry-run output is in journal format, so you can filter it, eg to
see only uncategorised transactions:

$ hledger import --dry ... | hledger -f- print unknown --ignore-assertions


File: hledger.info,  Node: incomestatement,  Next: prices,  Prev: import,  Up: COMMANDS

4.13 incomestatement
====================

This command displays a simple income statement, showing revenues and
expenses during a period.  It assumes that these accounts are under a
top-level 'revenue' or 'income' or 'expense' account (case insensitive,
plural forms also allowed).  Note this report shows all account balances
with normal positive sign (like conventional financial statements,
unlike balance/print/register) (experimental).  (is)

'--change'

     show balance change in each period (default)
'--cumulative'

     show balance change accumulated across periods (in multicolumn
     reports), instead of changes during periods
'-H --historical'

     show historical ending balance in each period (includes postings
     before report start date), instead of changes during each period
'--tree'

     show accounts as a tree; amounts include subaccounts (default in
     simple reports)
'--flat'

     show accounts as a list; amounts exclude subaccounts except when
     account is depth-clipped (default in multicolumn reports)
'-A --average'

     show a row average column (in multicolumn mode)
'-T --row-total'

     show a row total column (in multicolumn mode)
'-N --no-total'

     don't show the final total row
'--drop=N'

     omit N leading account name parts (in flat mode)
'--no-elide'

     don't squash boring parent accounts (in tree mode)
'--format=LINEFORMAT'

     in single-column balance reports: use this custom line format
'--sort-amount'

     sort by amount instead of account code/name

   This command displays a simple income statement.  It currently
assumes that you have top-level accounts named 'income' (or 'revenue')
and 'expense' (plural forms also allowed.)

$ hledger incomestatement
Income Statement

Revenues:
                 $-2  income
                 $-1    gifts
                 $-1    salary
--------------------
                 $-2

Expenses:
                  $2  expenses
                  $1    food
                  $1    supplies
--------------------
                  $2

Total:
--------------------
                   0

   With a reporting interval, multiple columns will be shown, one for
each report period.  Normally incomestatement shows revenues/expenses
per period, though as with multicolumn balance reports you can alter the
report mode with '--change'/'--cumulative'/'--historical'.

   This command also supports output destination and output format
selection.


File: hledger.info,  Node: prices,  Next: print,  Prev: incomestatement,  Up: COMMANDS

4.14 prices
===========

Print all market prices from the journal.


File: hledger.info,  Node: print,  Next: print-unique,  Prev: prices,  Up: COMMANDS

4.15 print
==========

Show transactions from the journal.  Aliases: p, txns.

'-m STR --match=STR'

     show the transaction whose description is most similar to STR, and
     is most recent
'--new'

     show only newer-dated transactions added in each file since last
     run
'-x --explicit'

     show all amounts explicitly
'-O FMT --output-format=FMT'

     select the output format.  Supported formats: txt, csv.
'-o FILE --output-file=FILE'

     write output to FILE. A file extension matching one of the above
     formats selects that format.

$ hledger print
2008/01/01 income
    assets:bank:checking            $1
    income:salary                  $-1

2008/06/01 gift
    assets:bank:checking            $1
    income:gifts                   $-1

2008/06/02 save
    assets:bank:saving              $1
    assets:bank:checking           $-1

2008/06/03 * eat & shop
    expenses:food                $1
    expenses:supplies            $1
    assets:cash                 $-2

2008/12/31 * pay off
    liabilities:debts               $1
    assets:bank:checking           $-1

   The print command displays full journal entries (transactions) from
the journal file in date order, tidily formatted.  print's output is
always a valid hledger journal.  It preserves all transaction
information, but it does not preserve directives or inter-transaction
comments

   Normally, the journal entry's explicit or implicit amount style is
preserved.  Ie when an amount is omitted in the journal, it will be
omitted in the output.  You can use the '-x'/'--explicit' flag to make
all amounts explicit, which can be useful for troubleshooting or for
making your journal more readable and robust against data entry errors.
Note, '-x' will cause postings with a multi-commodity amount (these can
arise when a multi-commodity transaction has an implicit amount) will be
split into multiple single-commodity postings, for valid journal output.

   With '-B'/'--cost', amounts with transaction prices are converted to
cost using that price.  This can be used for troubleshooting.

   With '-m'/'--match' and a STR argument, print will show at most one
transaction: the one one whose description is most similar to STR, and
is most recent.  STR should contain at least two characters.  If there
is no similar-enough match, no transaction will be shown.

   With '--new', for each FILE being read, hledger reads (and writes) a
special state file ('.latest.FILE' in the same directory), containing
the latest transaction date(s) that were seen last time FILE was read.
When this file is found, only transactions with newer dates (and new
transactions on the latest date) are printed.  This is useful for
ignoring already-seen entries in import data, such as downloaded CSV
files.  Eg:

$ hledger -f bank1.csv print --new
# shows transactions added since last print --new on this file

   This assumes that transactions added to FILE always have same or
increasing dates, and that transactions on the same day do not get
reordered.  See also the import command.

   This command also supports output destination and output format
selection.  Here's an example of print's CSV output:

$ hledger print -Ocsv
"txnidx","date","date2","status","code","description","comment","account","amount","commodity","credit","debit","posting-status","posting-comment"
"1","2008/01/01","","","","income","","assets:bank:checking","1","$","","1","",""
"1","2008/01/01","","","","income","","income:salary","-1","$","1","","",""
"2","2008/06/01","","","","gift","","assets:bank:checking","1","$","","1","",""
"2","2008/06/01","","","","gift","","income:gifts","-1","$","1","","",""
"3","2008/06/02","","","","save","","assets:bank:saving","1","$","","1","",""
"3","2008/06/02","","","","save","","assets:bank:checking","-1","$","1","","",""
"4","2008/06/03","","*","","eat & shop","","expenses:food","1","$","","1","",""
"4","2008/06/03","","*","","eat & shop","","expenses:supplies","1","$","","1","",""
"4","2008/06/03","","*","","eat & shop","","assets:cash","-2","$","2","","",""
"5","2008/12/31","","*","","pay off","","liabilities:debts","1","$","","1","",""
"5","2008/12/31","","*","","pay off","","assets:bank:checking","-1","$","1","","",""

   * There is one CSV record per posting, with the parent transaction's
     fields repeated.
   * The "txnidx" (transaction index) field shows which postings belong
     to the same transaction.  (This number might change if transactions
     are reordered within the file, files are parsed/included in a
     different order, etc.)
   * The amount is separated into "commodity" (the symbol) and "amount"
     (numeric quantity) fields.
   * The numeric amount is repeated in either the "credit" or "debit"
     column, for convenience.  (Those names are not accurate in the
     accounting sense; it just puts negative amounts under credit and
     zero or greater amounts under debit.)


File: hledger.info,  Node: print-unique,  Next: register,  Prev: print,  Up: COMMANDS

4.16 print-unique
=================

Print transactions which do not reuse an already-seen description.


File: hledger.info,  Node: register,  Next: register-match,  Prev: print-unique,  Up: COMMANDS

4.17 register
=============

Show postings and their running total.  Aliases: r, reg.

'--cumulative'

     show running total from report start date (default)
'-H --historical'

     show historical running total/balance (includes postings before
     report start date)
'-A --average'

     show running average of posting amounts instead of total (implies
     -empty)
'-r --related'

     show postings' siblings instead
'-w N --width=N'

     set output width (default: terminal width or COLUMNS. -wN,M sets
     description width as well)
'-O FMT --output-format=FMT'

     select the output format.  Supported formats: txt, csv.
'-o FILE --output-file=FILE'

     write output to FILE. A file extension matching one of the above
     formats selects that format.

   The register command displays postings, one per line, and their
running total.  This is typically used with a query selecting a
particular account, to see that account's activity:

$ hledger register checking
2008/01/01 income               assets:bank:checking            $1            $1
2008/06/01 gift                 assets:bank:checking            $1            $2
2008/06/02 save                 assets:bank:checking           $-1            $1
2008/12/31 pay off              assets:bank:checking           $-1             0

   The '--historical'/'-H' flag adds the balance from any undisplayed
prior postings to the running total.  This is useful when you want to
see only recent activity, with a historically accurate running balance:

$ hledger register checking -b 2008/6 --historical
2008/06/01 gift                 assets:bank:checking            $1            $2
2008/06/02 save                 assets:bank:checking           $-1            $1
2008/12/31 pay off              assets:bank:checking           $-1             0

   The '--depth' option limits the amount of sub-account detail
displayed.

   The '--average'/'-A' flag shows the running average posting amount
instead of the running total (so, the final number displayed is the
average for the whole report period).  This flag implies '--empty' (see
below).  It is affected by '--historical'.  It works best when showing
just one account and one commodity.

   The '--related'/'-r' flag shows the _other_ postings in the
transactions of the postings which would normally be shown.

   With a reporting interval, register shows summary postings, one per
interval, aggregating the postings to each account:

$ hledger register --monthly income
2008/01                 income:salary                          $-1           $-1
2008/06                 income:gifts                           $-1           $-2

   Periods with no activity, and summary postings with a zero amount,
are not shown by default; use the '--empty'/'-E' flag to see them:

$ hledger register --monthly income -E
2008/01                 income:salary                          $-1           $-1
2008/02                                                          0           $-1
2008/03                                                          0           $-1
2008/04                                                          0           $-1
2008/05                                                          0           $-1
2008/06                 income:gifts                           $-1           $-2
2008/07                                                          0           $-2
2008/08                                                          0           $-2
2008/09                                                          0           $-2
2008/10                                                          0           $-2
2008/11                                                          0           $-2
2008/12                                                          0           $-2

   Often, you'll want to see just one line per interval.  The '--depth'
option helps with this, causing subaccounts to be aggregated:

$ hledger register --monthly assets --depth 1h
2008/01                 assets                                  $1            $1
2008/06                 assets                                 $-1             0
2008/12                 assets                                 $-1           $-1

   Note when using report intervals, if you specify start/end dates
these will be adjusted outward if necessary to contain a whole number of
intervals.  This ensures that the first and last intervals are full
length and comparable to the others in the report.
* Menu:

* Custom register output::


File: hledger.info,  Node: Custom register output,  Up: register

4.17.1 Custom register output
-----------------------------

register uses the full terminal width by default, except on windows.
You can override this by setting the 'COLUMNS' environment variable (not
a bash shell variable) or by using the '--width'/'-w' option.

   The description and account columns normally share the space equally
(about half of (width - 40) each).  You can adjust this by adding a
description width as part of -width's argument, comma-separated:
'--width W,D' .  Here's a diagram:

<--------------------------------- width (W) ---------------------------------->
date (10)  description (D)       account (W-41-D)     amount (12)   balance (12)
DDDDDDDDDD dddddddddddddddddddd  aaaaaaaaaaaaaaaaaaa  AAAAAAAAAAAA  AAAAAAAAAAAA

   and some examples:

$ hledger reg                     # use terminal width (or 80 on windows)
$ hledger reg -w 100              # use width 100
$ COLUMNS=100 hledger reg         # set with one-time environment variable
$ export COLUMNS=100; hledger reg # set till session end (or window resize)
$ hledger reg -w 100,40           # set overall width 100, description width 40
$ hledger reg -w $COLUMNS,40      # use terminal width, and set description width

   This command also supports output destination and output format
selection.


File: hledger.info,  Node: register-match,  Next: rewrite,  Prev: register,  Up: COMMANDS

4.18 register-match
===================

Print the one posting whose transaction description is closest to DESC,
in the style of the register command.  Helps ledger-autosync detect
already-seen transactions when importing.


File: hledger.info,  Node: rewrite,  Next: stats,  Prev: register-match,  Up: COMMANDS

4.19 rewrite
============

Print all transactions, adding custom postings to the matched ones.


File: hledger.info,  Node: stats,  Next: tags,  Prev: rewrite,  Up: COMMANDS

4.20 stats
==========

Show some journal statistics.

'-o FILE --output-file=FILE'

     write output to FILE. A file extension matching one of the above
     formats selects that format.

$ hledger stats
Main journal file        : /src/hledger/examples/sample.journal
Included journal files   : 
Transactions span        : 2008-01-01 to 2009-01-01 (366 days)
Last transaction         : 2008-12-31 (2333 days ago)
Transactions             : 5 (0.0 per day)
Transactions last 30 days: 0 (0.0 per day)
Transactions last 7 days : 0 (0.0 per day)
Payees/descriptions      : 5
Accounts                 : 8 (depth 3)
Commodities              : 1 ($)

   The stats command displays summary information for the whole journal,
or a matched part of it.  With a reporting interval, it shows a report
for each report period.

   This command also supports output destination and output format
selection.


File: hledger.info,  Node: tags,  Next: test,  Prev: stats,  Up: COMMANDS

4.21 tags
=========

List all the tag names used in the journal.  With a TAGREGEX argument,
only tag names matching the regular expression (case insensitive) are
shown.  With additional QUERY arguments, only transactions matching the
query are considered.


File: hledger.info,  Node: test,  Prev: tags,  Up: COMMANDS

4.22 test
=========

Run built-in unit tests.

$ hledger test
Cases: 74  Tried: 74  Errors: 0  Failures: 0

   This command runs hledger's built-in unit tests and displays a quick
report.  With a regular expression argument, it selects only tests with
matching names.  It's mainly used in development, but it's also nice to
be able to check your hledger executable for smoke at any time.


File: hledger.info,  Node: ADD-ON COMMANDS,  Prev: COMMANDS,  Up: Top

5 ADD-ON COMMANDS
*****************

hledger also searches for external add-on commands, and will include
these in the commands list.  These are programs or scripts in your PATH
whose name starts with 'hledger-' and ends with a recognised file
extension (currently: no extension, 'bat','com','exe',
'hs','lhs','pl','py','rb','rkt','sh').

   Add-ons can be invoked like any hledger command, but there are a few
things to be aware of.  Eg if the 'hledger-web' add-on is installed,

   * 'hledger -h web' shows hledger's help, while 'hledger web -h' shows
     hledger-web's help.

   * Flags specific to the add-on must have a preceding '--' to hide
     them from hledger.  So 'hledger web --serve --port 9000' will be
     rejected; you must use 'hledger web -- --serve --port 9000'.

   * You can always run add-ons directly if preferred: 'hledger-web
     --serve --port 9000'.

   Add-ons are a relatively easy way to add local features or experiment
with new ideas.  They can be written in any language, but haskell
scripts have a big advantage: they can use the same hledger (and
haskell) library functions that built-in commands do, for command-line
options, journal parsing, reporting, etc.

   Here are some hledger add-ons available:
* Menu:

* Official add-ons::
* Third party add-ons::
* Experimental add-ons::


File: hledger.info,  Node: Official add-ons,  Next: Third party add-ons,  Up: ADD-ON COMMANDS

5.1 Official add-ons
====================

These are maintained and released along with hledger.
* Menu:

* api::
* ui::
* web::


File: hledger.info,  Node: api,  Next: ui,  Up: Official add-ons

5.1.1 api
---------

hledger-api serves hledger data as a JSON web API.


File: hledger.info,  Node: ui,  Next: web,  Prev: api,  Up: Official add-ons

5.1.2 ui
--------

hledger-ui provides an efficient curses-style interface.


File: hledger.info,  Node: web,  Prev: ui,  Up: Official add-ons

5.1.3 web
---------

hledger-web provides a simple web interface.


File: hledger.info,  Node: Third party add-ons,  Next: Experimental add-ons,  Prev: Official add-ons,  Up: ADD-ON COMMANDS

5.2 Third party add-ons
=======================

These are maintained separately, and usually updated shortly after a
hledger release.
* Menu:

* diff::
* iadd::
* interest::
* irr::


File: hledger.info,  Node: diff,  Next: iadd,  Up: Third party add-ons

5.2.1 diff
----------

hledger-diff shows differences in an account's transactions between one
journal file and another.


File: hledger.info,  Node: iadd,  Next: interest,  Prev: diff,  Up: Third party add-ons

5.2.2 iadd
----------

hledger-iadd is a curses-style, more interactive replacement for the add
command.


File: hledger.info,  Node: interest,  Next: irr,  Prev: iadd,  Up: Third party add-ons

5.2.3 interest
--------------

hledger-interest generates interest transactions for an account
according to various schemes.


File: hledger.info,  Node: irr,  Prev: interest,  Up: Third party add-ons

5.2.4 irr
---------

hledger-irr calculates the internal rate of return of an investment
account.


File: hledger.info,  Node: Experimental add-ons,  Prev: Third party add-ons,  Up: ADD-ON COMMANDS

5.3 Experimental add-ons
========================

These are available in source form in the hledger repo's bin/ directory;
installing them is pretty easy.  They may be less mature and documented
than built-in commands.  Reading and tweaking these is a good way to
start making your own!
* Menu:

* autosync::
* chart::
* check::


File: hledger.info,  Node: autosync,  Next: chart,  Up: Experimental add-ons

5.3.1 autosync
--------------

hledger-autosync is a symbolic link for easily running ledger-autosync,
if installed.  ledger-autosync does deduplicating conversion of OFX data
and some CSV formats, and can also download the data if your bank offers
OFX Direct Connect.


File: hledger.info,  Node: chart,  Next: check,  Prev: autosync,  Up: Experimental add-ons

5.3.2 chart
-----------

hledger-chart.hs is an old pie chart generator, in need of some love.


File: hledger.info,  Node: check,  Prev: chart,  Up: Experimental add-ons

5.3.3 check
-----------

hledger-check.hs checks more powerful account balance assertions.


Tag Table:
Node: Top68
Node: EXAMPLES1888
Ref: #examples1988
Node: OPTIONS3634
Ref: #options3736
Node: General options4101
Ref: #general-options4226
Node: Command options6825
Ref: #command-options6976
Node: Command arguments7374
Ref: #command-arguments7528
Node: Argument files7649
Ref: #argument-files7800
Node: Special characters8066
Ref: #special-characters8219
Node: Input files9638
Ref: #input-files9774
Node: Smart dates11744
Ref: #smart-dates11885
Node: Report start & end date13291
Ref: #report-start-end-date13461
Node: Report intervals14526
Ref: #report-intervals14689
Node: Period expressions15090
Ref: #period-expressions15250
Node: Depth limiting19207
Ref: #depth-limiting19351
Node: Pivoting19693
Ref: #pivoting19811
Node: Cost21487
Ref: #cost21595
Node: Market value21713
Ref: #market-value21848
Node: Combining -B and -V23215
Ref: #combining--b-and--v23378
Node: Output destination23525
Ref: #output-destination23687
Node: Output format23970
Ref: #output-format24122
Node: Regular expressions24507
Ref: #regular-expressions24644
Node: QUERIES26005
Ref: #queries26107
Node: COMMANDS30069
Ref: #commands30181
Node: accounts31163
Ref: #accounts31261
Node: activity32507
Ref: #activity32617
Node: add32977
Ref: #add33076
Node: balance35737
Ref: #balance35848
Node: Classic balance report38931
Ref: #classic-balance-report39104
Node: Customising the classic balance report40433
Ref: #customising-the-classic-balance-report40661
Node: Colour support42735
Ref: #colour-support42902
Node: Flat mode43075
Ref: #flat-mode43223
Node: Depth limited balance reports43636
Ref: #depth-limited-balance-reports43836
Node: Multicolumn balance report44292
Ref: #multicolumn-balance-report44490
Node: Budget report49670
Ref: #budget-report49813
Ref: #output-format-152847
Node: balancesheet52925
Ref: #balancesheet53061
Node: balancesheetequity55372
Ref: #balancesheetequity55521
Node: cashflow56058
Ref: #cashflow56186
Node: check-dates58309
Ref: #check-dates58436
Node: check-dupes58553
Ref: #check-dupes58677
Node: close58814
Ref: #close58921
Node: help59251
Ref: #help59351
Node: import60425
Ref: #import60539
Node: incomestatement61269
Ref: #incomestatement61403
Node: prices63807
Ref: #prices63922
Node: print63965
Ref: #print64075
Node: print-unique68969
Ref: #print-unique69095
Node: register69163
Ref: #register69290
Node: Custom register output73791
Ref: #custom-register-output73920
Node: register-match75150
Ref: #register-match75284
Node: rewrite75467
Ref: #rewrite75584
Node: stats75653
Ref: #stats75756
Node: tags76626
Ref: #tags76724
Node: test76960
Ref: #test77044
Node: ADD-ON COMMANDS77412
Ref: #add-on-commands77522
Node: Official add-ons78809
Ref: #official-add-ons78949
Node: api79036
Ref: #api79125
Node: ui79177
Ref: #ui79276
Node: web79334
Ref: #web79423
Node: Third party add-ons79469
Ref: #third-party-add-ons79644
Node: diff79779
Ref: #diff79876
Node: iadd79975
Ref: #iadd80089
Node: interest80172
Ref: #interest80293
Node: irr80388
Ref: #irr80486
Node: Experimental add-ons80564
Ref: #experimental-add-ons80716
Node: autosync80996
Ref: #autosync81107
Node: chart81346
Ref: #chart81465
Node: check81536
Ref: #check81638

End Tag Table
