# Runs on any push to binaries-linux-x64 or binaries.
# Produces optimised static x64 linux  binaries,
# using the GHC version below and cabal and Alpine linux, 
# which provides the statically-linkable musl.

name: binaries-linux-x64
on:
  push:
    branches: [ binaries-linux-x64, binaries ]
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    container: alpine:latest
    steps:

    - name: Check out
      uses: actions/checkout@v4
      # have to fetch everything for git describe for --version
      with:
        fetch-depth: 0  

    # things to be cached/restored:

    - name: process cache of ghcup-installed tools
      id:   ghcup
      uses: actions/cache@v4
      with:
        path: ~/.ghcup
        key: ${{ runner.os }}-ghcup-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-ghcup

    - name: process cache of cabal-installed libs
      id:   cabal
      uses: actions/cache@v4
      with:
        path: ~/.cabal
        key: ${{ runner.os }}-cabal-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-cabal

    # actions:

    - name: Install general tools with system package manager
      run: |
        apk --no-cache add binutils-gold curl gcc g++ git gmp-dev ncurses-dev ncurses-static libffi-dev make xz tar perl zlib-dev zlib-static

    - name: Add .ghcup/bin to PATH for following steps
      run: |
        echo "$HOME/.ghcup/bin/" >> $GITHUB_PATH

    - name: Install haskell tools with ghcup if needed
      run: |
        if [[ ! -x ~/.ghcup/bin/ghcup ]];     then mkdir -p ~/.ghcup/bin && curl https://downloads.haskell.org/~ghcup/x86_64-linux-ghcup > ~/.ghcup/bin/ghcup && chmod +x ~/.ghcup/bin/ghcup; fi; printf "ghcup: "; ghcup --version
        if [[ ! -x ~/.ghcup/bin/ghc-9.8.2 ]]; then ~/.ghcup/bin/ghcup install ghc 9.8.2      && ~/.ghcup/bin/ghcup set ghc 9.8.2;      fi; printf "ghc: "; ghc --version
        if [[ ! -x ~/.ghcup/bin/cabal ]];     then ~/.ghcup/bin/ghcup install cabal 3.10.3.0 && ~/.ghcup/bin/ghcup set cabal 3.10.3.0; fi; printf "cabal: "; cabal --version

    - name: Update cabal package index
      run: |
        cabal update

    - name: Build with cabal
      run: |
        cabal build --enable-executable-static hledger || (echo "ERROR: building hledger failed"; false)
        cabal build --enable-executable-static hledger-ui || (echo "ERROR: building hledger-ui failed"; false)
        cabal build --enable-executable-static hledger-web || (echo "ERROR: building hledger-web failed"; false)

    - name: Gather binaries
      run: |
        mkdir tmp
        cp dist-newstyle/build/x86_64-linux/ghc-*/hledger-*/x/hledger/build/hledger/hledger tmp
        cp dist-newstyle/build/x86_64-linux/ghc-*/hledger-ui-*/x/hledger-ui/build/hledger-ui/hledger-ui tmp
        cp dist-newstyle/build/x86_64-linux/ghc-*/hledger-web-*/x/hledger-web/build/hledger-web/hledger-web tmp
        cp hledger/shell-completion/hledger-completion.bash tmp
        cd tmp
        strip hledger
        strip hledger-ui
        strip hledger-web
        tar cvf hledger-linux-x64.tar hledger hledger-ui hledger-web hledger-completion.bash

    # upload-artifact loses execute permissions, so we tar the binaries to preserve them.
    # github UI always zips artifacts when they are downloaded, so we don't bother compressing the tar.
    # Unfortunately it means users must both unzip and untar.
    - name: Upload binaries
      uses: actions/upload-artifact@v4
      with:
        name: hledger-linux-x64
        path: tmp/hledger-linux-x64.tar
